DevOps
AGILE
BOOTSTRAP
Reporting progress in agile
SDLC
USER STORIES
Agile value and principles



GIT:
	
Sotware Project Management:
	1.SDLC - 3/4 months
	2.AGILE - 2-4 weeks
	3.DevOps - 1 day ---- we can resolve the customer requirement during runtime with minimal requirement ---- the moment developer commits then the task will get completed ---- it is first preference as it is very fastt ---- but implementation needs to understand take time


DevOps project: Cloud Native Application ----> It has 4 pillars
				1.MicroService --- Spring Boot,.net,nodejs
				2.Containerization with Docker
				3.Cloud --- AWS,AZURE,GOOGLE
				4.DevOps ---Using CICD (uses git)


DevOps:
	It is not a tool or technology 
	Its a new culture / process to develop, release and maintainance of software application / project with higher quality,faster way
	we acheive by using automation tools

Devops = developer (plan/code/build/test) + operations(release/deploy/operate/monitor)


Why we need DevOps?
	required to know existing sdlc models
		(old model) waterfall model (1950-60)
		(current model)agile
	//Agile
	Most frequently used model from past 15 years
	It is the combination of multiple models
		Rational Unify Model(Rup)
		Adaptive Software Development(ASD)
		Crystal Clear
		Scrum
	Scrum is the most popular agile framework
	continuous delivery
	Continuous Feedback
	Requirements change in the model
	Less development time
	Less development cost
	Client satisfaction is very high

CICD = Continuous Integration and Continuous Delivery
	
Why do we need to go with Devops?
	DevOps and agile both are different models
	Both the model support rapid software development
	The different between both the model come after development

			DevOps    =     Development     +      Operation
			Agile     =     Development     +      No Operation

	In agile model seperate team is responsible for seperate tasks like dev,tester,deploymet etc.....
	DevOps person is responsible for everything
	

DevOps:
	It is a process or culture
	DevOps is automation tools

What are the main tools we need to know to be DevOps engineer?
	1.Version control system
	2.Build tools
	3.Configuration management tools etc...

Version control system:
	Software configuration management
		Source code management

Need of VCS?
	project module completed and demo done to client
	client suggest some changes
	

	every version should be maintained
	but maintaining multiple version is difficult task

	to maintain different version of code 
How VCS works?
	we will follow a tool to manage the version.
 	it is not only for code
 	any document if i want to maintain multiple version
 		tester >> 
 		developer >>
 		Project Manager >>
 	[work space] --- used to write code.
 			 maintain multiple file
 	[repository] --- VCS is applicable
 			 maintain multiple file
 	developer save all the files in the repository.
 	in repository all the data is stored as commit and one unique number is generated for each commit ie version1
 	commit sending data from ws to repo
 	after demo to client
 	again all the data is stored as commit and one unique number is generated for each commit ie version2
 	each detials about the commit is stored.
	so each commit version we can deliver demo to client from repositoty.
 	checkout the process of sending file from repository to workspace.
 	we need a machanism to do the process.
		ie Version Control System.

Benifit of VCS?
	we have different version and we can choose any version based on client requirement. 
	with every version we can maintain metadata about code.
	multiple developer can work in collaborate way
 	dev can share the code to the peer developer
 	we can make access control ie who can update code or who can modify code.


Types of VCS?

	1.Central Repository server:
		version control happen only in one place
		all the operations happen in central repository
		easy to setup and easy to maintain
			ie., CVS, SVN, PERFORCE

	Limitation of Centralized VCS
 		The total code stored at a single place, some thing wrong cause single point of failure.
 		All the dev should be connected with the centralized version control system.
 		If network down, version control won't be available to dev.
 		All checkout and commit operations performed over network.
 		low performance.
 		as the number of file increase then for huge project this centralized VCS have multiple problems.

	2.Distributed VCS
		




Difference between centralized and distributed VCS?




GIT:

	It is a Distributed Version Control Tool
	Linux GIT Created by Linux Torvalds created by Linux Torvalds
 	no single point of failure since all the dev have local repository.
 	check out and commit performed locally.
 	dev work space not required to connect to network
 	staging area (it is part of developer machine)
 		In git commit is 2 step process
 		first we have to commit in the staging area
 		then from staging area to local repository
 		staging area is a virtual area
 		we can double check any update before commit
 		it is not available in the other version of the VCS
 
WS1 [Files]  ...commit---> [local repository] --commit--->[local GIT
 
WS1[Files] --commit [Staging Area] repository)
 
	git will take the snap shot of the data and then store it
 	criptographic conversion done in the staging area convert our data into hashing algo and encripted format
 	encription and decription is automatically take care of by git Branching and Merging


Strp-1:
	Create a GitHub Rep
Step-2:
	Download git
Step-3:
	go to git bash
	Create local Rep
	/>git init <repo name>
	Create a clone rep
	/>git clone <repo name>
	Send file from local to global repo

	git status