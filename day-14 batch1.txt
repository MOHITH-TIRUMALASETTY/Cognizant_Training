


Day-1 10th July 2025

#JAVA OOP

	Object Oriented Programming - Class Object Inheritance Polymorphism Encapsulation Abstraction
		

#Class Object

		OBJECT - what we find in real life.
                       - every object have attribute and action
                       - tangible  - pen obj
                         non tangible  - account


		CLASS -  It is a blue print of an object


					       Attribute				action
 
			PenObject         color , cost , brand			        write




		instance variable                                  				   Local variable
		- any variable defined inside class outside method			- any variable declared inside method.
                - instance variable have default value 
			String  null
			float  0.0f
			


          class  Pen {


		String color;   // instance variable
		float cost;
		String brand;
                String companyName;

		void write(){

                    int  a=3;   // local variable

		}

		public static void main(String args[]){
			
			Pen obj =  new  Pen();
			obj.write();
			System.out.println("color"+obj.color+"cost:"+obj.cost+"brand:"+obj.brand);

		}

	  }

	/>javac Pen.java
	/>java Pen

                  
        HandsOn- (Hello World using java)
	   1.Identify 3 object, 5 attribute , 5 action
	   2.Create  3 class
	   3.Create object and print all the attribute value and call the function.
		



Software Project: Enterprise Level Application
     e-com
     banking
     Assessment system
     food delivery system
     ride share system


 
#UML

-Use Case Diagram:
	UML or Unified Modeling Language, is a standardized, general-purpose visual modeling language designed for specifying, visualizing, 
        constructing, and documenting the artifacts of software systems.



Actor :  who is doing the task ?

     Assessment system : 

		Employee 

		Admin

                instructor


Use Case : Task done by the actor
     

   Employee :   SubmitAssessment  Login  SignUp

   Admin :   ScheduleExam

   Instructor:  CheckAnswer



HandsOn:
	1. Design your project with Actor and UseCase:

		min  3 actor
		min  20 usecase


Software Design
#SDLC -  3/4 months
#AGILE -  2-4 week


#definition
- it is an iterative and incremental model.
- iterative - same process is repeating again and again.ie getting the requirement , design , coding again same process again and again.
		
		design v1 => customer   rejected 
                design v2 => customer   rejected
                design v3 => customer   rejected 
                design v4 => customer   accepted
  
- incremental - we have implemented some features in the beginning and keep on adding new features with the existing software.

                0  1   1   2   3   5   8

#agile principle             
- customer no need to wait until all the features is done.
- we release 10 features in each release.
- we can accommodate the requirement from the customer.



#communication
- good communication between  customer ,  dev ,  tester , business analyst.
  


#Advanteges
- requirement changes are allowed in any stage of development
- in agile delivery is faster.

         devteam(4) =>  2 features => 10 hr =>  completed
         QA(3)    =>  2 features => 6 hr =>  completed

          Standup meeting => 1 features 

         devteam(4) =>  1 features => 4 hr =>  
         QA(3)    =>  1 features => 3 hr => 


          Standup meeting => update features 

         devteam(4) =>  update features => 3 hr =>  
         QA(3)    =>  update features => 2 hr => 


#disadvantage
- less focus on design and documentation but more number of meetings.
 

#SCRUM
-agile is a process model.(that is the process)
-scrum(how to follow the process) is a framework through which we develop the software and release the software.
-to follow the agile principle we follow the scrum framework.


#SCRUM Team
- normally contain 5-9 people. 
- like product owner , scrum master , dev team , QA team

- product owner - define the features of the product
                - always connect with the customer
                - priority on the features according to the market value
                - adjust features and priority every iteration
                - accept or reject work result.
                - separate designation
               
- scrum master - different role
               - facilitate and drive the agile process
               - he make sure that people in the team follow the agile process or not.                       
               
- dev - design and develop software
- QA - test the software



11th July 2025
What we have done last day ?

#Java
 Discovery,Version,Flavour,BuzzWords,
 Lab-HelloWorld
 JVM,JRE and JDK 
 HandsOn-3

 Java Control Flow

 CLASS & OBJECT
 instance var and local var
 primitive and reference 
 stack and heap area
 Data Type 
 Wrapper Class
 Constructor, this ,this()
 Lab-


# Discovery
# Version
# Flavour
	J2SE             J2EE               J2ME
        core java        web                mobile
					    android , adf faces , rich faces

# BuzzWords
	Object Oriented 
 	Distributed 
 	Platform Independent                                                                  
 	Secure
 	Multi threaded
 	Portable
 	Robust


#Object Oriented

	       OBJECT - what we find in real life.
                       - every object have attribute and action
                       - tangible  - pen obj
                         non tangible  - account


		CLASS -  It is a blue print of an object


					       Attribute				action
 
			PenObject         color , cost , brand			        write


#Distributed
	    - remotely call some function
            - calling function from one JVM to another JVM	




#Platform Independent
	      -  JDK  is platform dependent
              -  java is OS   Independent
	      -  compiled once but run anywhere 


#Secure

		/> javac Hello.java // compilation

			Hello.class

		/> java Hello // run       JVM




#Multi threaded

		       Multi Threaded

		        Process   (OS)               					  Thread (JAVA)
			Multi Tasking                                                     Multi-Threading

		     P1   P2    P3    P4                 				T1    T2     T3    T4

	             R1   R2    R3    R4                                             ----------R-------------
                                                                                                                                                                     
	        - allocate separate resource                                   - all thread can share single resource
			             for each process
	        -  more  resource                                               - less resource
	        -  expensive                                                    - less expensive




HANDS On:- 3  Time - 10 min  

Write a Program that accepts four Strings as command line arguments and generate the 
output in a specific way as given below.

Example:
If the four command line arguments are ABC  , GLOBAL , Ltd and Bangalore then the output generated should be   
ABC GLOBAL Ltd Bangalore.

/> java  Pen  ABC GLOBAL Ltd Bangalore


class Hello {

	public static void main(String args[]){

		String  s1 =args[0];
		String  s2 = args[1];
		String s3 = args[2];
		String s4 = args[3]; 
		System.out.println(s1 +" "+ s2 +" "+s3+" "+s4);

	}
}

	/> javac  Hello.java

	/> Java Hello   ABC GLOBAL Ltd Bangalore




#JVM,JRE and JDK


     				    jdk = Java Developement  Kit
                                           = JDK  is platform dependent
                                           = inside jdk we have jre

                                     jre =  Java Runtime Env
                                           =  It contain jvm , j2se packages and compilers


                                    JVM =  Java Virtual Machine
                                               =  It is defined inside JRE
                                               =  It is used to run the byte code
                                               =  JVM - specification
                                                               BEA System -  JRocket
                                                               Oracle  -  Hotspot
                                               =  3 layer 
                                                           1. class loader   2. byte code verifier  3. Execution unit

                                               =  3 Different Phase
                                                           1. Load Phase   2.  Link Phase   3. Initialization phase

                                                    compilation                     running JVM
                                      Hello.java   ===========>   Hello.class     =======>   MC/NC



#java Control flow:(Hands-

	A. selection (if , if else , switch)

	B. Iterative (for, while, do-while)


		class   IfElseDemo{
                             public static void main(String args[]){
                                        String  s1 = args[0];
                                        int m= Integer.parseInt(s1)

                                         if(m == 12 || m==1 || m==2)         												System.out.println("winter");
                                         else if(m == 3 || m==4 || m==5)
                                                                    													System.out.println("Spring");
                                         else if(m == 6 || m==7 || m==8)
                                                                            												System.out.println("Summer");
                                         else                     													System.out.println("Invalid month");       
                             }
  		}
		time - 10  min 
























































	
		








































#UML:
Sequence Diagram: A sequence diagram simply depicts interaction between objects in a sequential order i.e. the order in which these interactions take place.

#Agile:
scrum master



#Agile

#SCRUM terminology


User Story - feature or module in software


Epic - collection of user stories


Product backlog -  it is a doc or excel contain list of user stories. prepared by product owner


sprint/iteration - period of time to complete user stories.(develop, design, test etc)
                 - min 2 week and max 4 week


sprint planning meeting : meeting in the team and decided what are the features and created 
                   , developed and  delivered to customer.



Spring backlog - list of committed stories by dev/QA for specific sprint.

               - for every sprint the Spring backlog will change.


Scrum meeting - Meeting conducted by scrum master every day 15 min.
              - called as scrum call/Standing meeting.
                      3 questions:
			- what did you do yesterday ?	
			- what will you do today ?
			- are there any impediments in your way ?



Sprint retrospective meeting -  end of the spring one meeting
                            -   what went wrong , what went right, any other thing you want to do next ?


Story Point - during sprint planning meeting  every dev and tester will identify some stories.
            - estimation is done in the form of story point.
            - ex dev say they need some time to develop the sprint, tester say they need some time to define testcase the sprint


 Ex  1 story point =  1 hr  / 1 day  depends on company

     search  is story point -   dev - 5 hr  /  QA - 3 hr 


Burndown chart - graph created by scrum master
               - mainly display how much task remaining in the sprint.








14th July 2025
what we have done last day ?                   

TOPICS:
#JAVA
Bean Class
static 
Object Relationship
OOPs-Inheritance
IS-A  HAS-A
super
super()
Labs-
Hands On-Clothing

#UML: class diagram

#User Interface
Part-1
   -What is Responsive Web Design ?
   -Main Component - Fluid layout ,Fluid image, media queries 
   -Tools of the trade- Editors, design tools, testing tools
   -Html5 

part-2
   -CSS3 Structure
   -Media Queries - style for all screen size and devices
   -Project

Part3
   -What is Twitter Bootstrap ?
   -getbootstrap.com
   -base markup and css
   -navbar & dropdowns
   -rows , grids and media objects
   -List groups & glyphicons
   -Forms , Tooltips , Popovers
   -Models & Tabs
   -Accordions
   -Project





#Bean class
	- any class that have instance variable and its getters and setters is called Bean class.
        - why ?
		- it is used to initialize object attribute.
                - To implement data hiding.
                       - private variable can not be accessed outside object.

	 //Data Hiding : 
                     - hiding attribute value and method inside the object.
                     - data hiding is done using private access specifier.
                      - implemented into two level:
                                       A. data member
                                        B. method level



	class  Dept{

		private int deptId;
		private String deptName;


		public void setDeptId(int did){
			this.deptId=did;

		}

		public int getDeptId(){

			return deptId;
		}

		public void setDeptName(String dName){
			this.deptName=dName;
		}

		public String  getDeptName(){
			return deptName;
		}
	   void display(){
			System.out.println(deptId+"/"+deptName);
		}
		
	}
	class DeptDemo{
		public static void main(String args[]){
			Dept obj=new Dept();
		//	System.out.println(obj.deptId+"/"+obj.deptName);
		//	obj.display();
			obj.setDeptId(1001);
			obj.setDeptName("Admin");
			System.out.println(obj.getDeptId()+"/"+obj.getDeptName());
			
		}
	}


#static 
	- How we can access instance variable value from class ?

			answer  :    object

	- Is there any other way to access instance variable value without creating an object of the class ?

			answer : static

	- static is keywork
	- static variable can be accessed using class name if main method is outside the class.
	- static variable value can be accessed without class name if main method is in the same class.
        - static variable value can be shared by multiple object.


class  DeptDemo{
		static int deptId;
		static String deptName;

		public void setDeptId(int did){
			this.deptId=did;
		}

		public int getDeptId(){
			return deptId;
		}

		public void setDeptName(String dName){
			this.deptName=dName;
		}

		public String  getDeptName(){
			return deptName;
		}
	        void display(){
			System.out.println(deptId+"/"+deptName);
		}
		public static void main(String args[]){
			//Dept obj=new Dept();
		//	obj.getDeptId();
			System.out.println(deptId+"/"+deptName);	
		}
	}

         LAB - 5 min


         class  EmployeeDemo{
		
		int empId=7;
		static int deptId=8;

		EmployeeDemo(){
			empId++;
			deptId++;
			System.out.println("empId:"+empId+" deptId:"+deptId)
		}

		public static void main(String args[]){
			EmployeeDemo obj=new EmployeeDemo();
			EmployeeDemo obj1=new EmployeeDemo();
			EmployeeDemo obj2=new EmployeeDemo();
			EmployeeDemo obj3=new EmployeeDemo();	
		}

	 }


#static block

	- if we create multiple object , constructor is called multiple time but static block called only one time.
	- first static blocked called then constructor called.


	class  ProductDemo{

		ProductDemo(){
			System.out.println("Default constructor called");

		}
        static{
            System.out.println("Static blocked called");
        }

		
		public static void main(String args[]){

			ProductDemo obj=new ProductDemo();
			ProductDemo obj1=new ProductDemo();
			ProductDemo obj2=new ProductDemo();
			
		}

	 }


#User Input In Java:
		2 different approach:

			A. Using BufferedReader
			B. Using Scanner



#A. Using BufferedReader

	java.io.

				Stream		StreamReader	     Reader

				Binary            conversion         Character

import java.io.*;
class UserInputDemo{

    public static void main(String args[])throws IOException{
        
            BufferedReader  rd=new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter your name:");
			String name=rd.readLine();
			System.out.println(name);
            		System.out.println("Enter your marks:");
            		String marks=rd.readLine();
			System.out.println(marks);
    }
}


limitation :
	- we have to handle exception
	- we have to convert binary to character.
	- input can not be differentiated between different data types.

# Using Scanner
             A.     Module java.base   >   Package java.util   >   Class Scanner
             B.     from java 5
             C.     we don't have to handle Exception
             D.     we are not responsible to convert  binary to character.
             E.      user input is always available in the required format

                                                                   
import java.util.*;
class   ScannerDemo{

    public static void main(String args[]){

        Scanner sc = new Scanner(System.in);

        System.out.println("Enter your name:");
        String   s1 =  sc.next();
        System.out.println("My name is"+ s1);

        System.out.println("Enter your marks:");
        int  s2 =  sc.nextInt();
        System.out.println("My marks is"+ s2);

    }
}


  //Object Relationship:


		OBJECT - anything that have attribute and action.


		OBJECT Relationship -   

				 HAS  A   =  Association //aggregation

					  = one object contain another object

					many ClassRoom  have  many Chair

					     Company have Employee

						relationship name - Have
						cardinality - 1:1 , 1:m, m:n , m:1


	class  ClassRoom {

		Chain   obj=new  Chair();

	 }

				HAS  A =  Composition 
				       =  one object can not exist without the other

					Order  contain OrderItem

	class  Order{

		OrderItem  obj=new OrderItem()

	}



					 

# HAS A / association
               - relationship between two object is called association where one
                               object should contain another object.
                -  one-to-one  , – one-to-many , – many-to-one , – many-to-many
                -  two  type:
                           A. Aggregation  - contained object can exist without the container object
                                                     ex  Classroom  have  Student
                                                                                                               
                           B. Composition - contained object can not exist without the container object
                                                      ex   order   contain  orderitem 

                                                                                 
                                                  one  classroom   have          many     chair       1:M
                                                  one employee    have     one    manager       1:1
                                                  many movie   done by    one actor          M:1
                                                  many movie  done by many actor     M:N
                        











                                     
                        # IS  A  /  inheritance :

 
			OPs-Inheritance - IS   A

                           - re-usability in java.
			   - multiple inheritance does not suported by java.
			   - Java support multiple inheritance with the concept 
			    of interface.



			    Manager  IS     A      Employee

			    Car   IS   A   Vehicle


class  Employee{


}

class Manager extends Employee{


}





class   Employee{
                       private int  empId=1001;
		       private  String  empName="Max";
			           
                       public int getEmpId(){
                        return empId;
                       }
                       public void setEmpId(int eid){
                        empId=eid;
                       }

                       public String getEmpName(){
                        return empName;
                       }
                       public void setEmpName(String eName){
                        this.empName=eName;
                       }
}

class   Manager    extends  Employee{

		       private String desig="Admin";
			           
                       public String getDesig(){
                        return desig;
                       }

                       public void setDesig(String desig){
                            this.desig=desig;
                       }
}

 class   InheritanceDemo{
			public static void main(String args[]){

				      Manager  obj = new Manager();
				      System.out.println(obj.getEmpId()+"/"+obj.getEmpName()+"/"+obj.getDesig());

		}
 }



#super
	- super is keyword in java.
	- if base class and derived class have same variable name then creating an object of 
	derived class it is not possible to print base class variable vale .
	Base class variable value is hidden inside the Derived class.
        if variable hiding is disease then super is cure.
	- it is used to call base class variable and method.


	class   A{

		int a = 30;
	}
	class   B  extends A {

		int a = 40;		

		void show(){
			System.out.println("a="+ a + "super.a="+super.a);
		}

	}
	class SuperDemo{
		public static void main(String args[]){

			B  obj = new   B();

			   obj.show();
		}
	}





#super()

			 super(): - It is used to call base class constructor.
			          - It is used to implement re-usability.
			          - super() must be the first statement inside the constructor.	
	class AA{

		int x;
		int y;

		AA(){}
		
		AA(int a,int b){
		   this.x=a;
		   this.y=b;
		   System.out.println("x="+x+"y="+y);
		}

	}
	class BB extends AA{
		int z;
		BB(){}

		BB(int a,int b,int c){
		    super(a,b);
		   //this.x=a;
		   //this.y=b;
		   this.z=c;
		   System.out.println("x="+x+"y="+y+"z="+z);
		}
	}
	class MainSuperDemo{
		public static void main(String args[]){
			BB obj = new   BB(200,300,400);
		}
	}



	              HandsOn - 5 // super()

                                 BASE CLASS :  CLOTHING
	                         attribute : id(int),price(double),size(int),color(string)
                                 action: display()
		        
                                 DERIVED CLASS :  SHIRT
		        	 attribute: fit (int)

                                 DERIVED  CLASS :  TROUSER
		       		 attribute:fit(int) , gender(string)
		       
	              s-1  Create 3 shirt object using shirt parameterized constructor and print the attribute.
	              s-2  Create 3 trousers object using trouser parameterized constructor and print the attribute.



#UML (5 class)

A UML class diagram is a type of diagram used in software engineering to visually represent the static structure of a system.
 It shows the classes, their attributes, operations (methods), and the relationships between them.
 These diagrams are crucial for object-oriented design and help in modeling the structure and interactions within a software application. 

Key Components of a UML Class Diagram: 
Classes:
Represent the main elements and concepts of the system. They are depicted as rectangles divided into three compartments: name, attributes, and operations.
 
Attributes:
Describe the properties or data of a class. They are listed in the middle compartment of the class rectangle. 

Operations:
Represent the methods or functionalities of a class. They are listed in the bottom compartment of the class rectangle. 

Relationships:
Indicate how classes relate to each other, including inheritance, association, aggregation, and composition. 






#User Interface
Part-1
   -What is Responsive Web Design ?
   -Main Component - Fluid layout ,Fluid image, media queries 
   -Tools of the trade- Editors, design tools, testing tools

   -Html5 









                   
		# Responsive Web Design:
			- An approach to designing websites and applications that  offers easy browsing 
			and navigation on wide range of devices.







		# 3  Component To Create Responsive Web Design

			A.   Fluid and Flexible layout
                                                                   
				width=90%


			B.   Flexible images 
				img{
				    max-width=100%
				}



			C.   CSS3  Media Queries (@media)

                       mobile          tablets              mini tablets                 desktop
			600px           700px              320px-568px                768px-980px

                                         
                       mobile.css      tablet.css           mtablet.css            desktop.css



			<link rel="stylesheet" media="only screen and (mid-width:320px)
                                                         and (max-width:568px)" href="mtablet.css"/>











			// HTML 5   

			-   2006     -   HTML  5
			-   HTML 5   =    HTML  +   CSS   +   Java Script
			-   HTML  Created  By    Tim  Berners - Lee
			-   HTML 5  Created   By      W3C     +     WHATWG
			-   HTML 5  web Page is Device independent
			-   HTML 5   Reduce the need of Java Script in Form Validation
			-   HTML  5   Better View Of Code
			-   HTML  5  support  media tag
			-   HTML 5   have root element as    <!DOCTYPE html>




			//HTML 5  General Semantics
			-  <section> , <article>, <header>,  <footer>, <hgroup>,<aside>,   
			   <detail>, <summary>, <figure>,<figcaption>,<address>,<base>,<blockQuote>



			//Structure  OF    HTML 5   Document
			
			<!DOCTYPE html>
			<html>
    			<head>
    			</head>
    			<body>
				<header></header>   -   at the beginning
				<nav></nav>  -   navigational link
				<section>       -  used to define grouping of context
					<article></article>    -   self independent content
					<article></article>
					<article></article>
				</section>
				<footer></footer>
			</body>
			</html>


			<address>
				- text in the element is italics
				- related to contact info

			<aside>
				-  related  information about something

                       <article>
				-   self independent info

			<base>
				-  default link and default target for all  hyperlink
				-  it is defined inside the head tag 

			<blockquote>
				-  to place the text separately ie tab space before and after
				   the text.

			<details>   -  it is used to show some extra info
			<summary>  - it is used inside <details>
    
			<hgroup>
			                     -  collection of headings
                                             -  browser will consider all the headings as a group

			<figure>,<figcaption>




#Example
<!DOCTYPE html>
<head>
</head>
<body>
<address>
    D606 , Eswar Hotel ,
    Padur , Chennai-560045
</address>

This is Cognizant
<aside>
    A cloud-native application is a software system designed and built to leverage the unique characteristics 
    of a cloud computing environment, such as scalability, elasticity, and resilience. These applications are 
    typically constructed using microservices, containerization (like Docker), and automated deployment pipelines (CI/CD).
     Cloud-native applications are built from the ground up to maximize the benefits of cloud infr
</aside>

<article>
    Welcome To Cognizant
    <p>
        A cloud-native application is a software system designed and built to leverage the unique characteristics
         of a cloud computing environment, such as scalability, elasticity, and resilience. These applications are typically 
         constructed using microservices, containerization (like Docker), and automated deployment pipelines (CI/CD). 
        Cloud-native applications are built from the ground up to maximize the benefits of cloud infr
    </p>
</article>


<blockquote>
    A cloud-native application is a software system designed and built to leverage
     the unique characteristics of a cloud computing environment, such as scalability, elasticity, and resilience. 
     These applications are typically constructed using microservices, containerization (like Docker), and automated deployment 
     pipelines (CI/CD). Cloud-native applications are built from the ground up to maximize the benefits of cloud infr
</blockquote>

  <details>
    AAAAAAAAAAAAA
    <summary>
        A cloud-native application is a software system designed and built to leverage the unique characteristics
         of a cloud computing environment, such as scalability, elasticity, and resilience. These applications are 
         typically constructed using microservices, containerization (like Docker), and automated deployment pipelines (CI/CD).
          Cloud-native applications are built from the ground up to maximize the benefits of cloud infr
    </summary>
  </details>


  <figure>
    <img src="C:\Users\Amitava\OneDrive\Desktop\Java Batch\day-3\ui\ship.jpg"/>
    <figcaption>This is cognizant</figcaption>
  </figure>


    <header>

    </header>
    <nav>

    </nav>
    <section>
        <article>

        </article>
    </section>
    <footer>

    </footer>

</body>
</html>





                                                    // Inline Elements

                  				<mark> , <meter> , <progress> , <time>


                                                          <mark>   - it is used to highlight the text
                                                                   - by default text background color is yellow.

                                                          <meter>
                                                                            <meter value="0.2"  low="0.4" high="0.9" optimum="0.5"></meter>
                                                                            green  -  available
                                                                            yellow - warning
                                                                            red   -   no
                                                                            - optimum is used to define floating point.

                                                          <progress>
                                                                             <progress  value="20"     max="100"> </progress><br>
                                                                             - used to get progress bar

                                                          <time> 
                                                                          - it is used to show time.
                                                                       <p> Tomorrow our session will start at 1.30 pm IST<p>
                                                                       <p> Tomorrow our session will start at <time>1.30 </time> pm IST<p>



					Break Time - 10 mins




                                                  //Input Form Controls
                                                                        - email , url , number , range , date picker , search , color

                                                                         -email
                                                                         -telephone
                                                                         -url
                                                                         - number
                                                                         - file
                                                                         - color                           r                g               b
                                                                                                          0                 0              0     =======>  black
                                                                                                           225            225              225 =======> white

                                                                      

















<!DOCTYPE html>
	<head>
	</head>
	<body bgcolor="blue">
		<form name="input" action="#">
			<fieldset>
				<p>
		      		<label for="name">Name:</label>  <input type="text" name="name" required maxlength="30"/>
		        	<p>
		        <p>
		      		<label for="email">Email:</label> <input type="email" placeholder="Enter your mail" name="email" maxlength="30"/>
		        </p>
		         <p>
		      		<label for="tel">Telephone:</label> 
                     		<input type="tel" placeholder="Enter your phone" name="phone" maxlength="30" readonly/>
		        </p>	
                	<p>
		      		<label for="Abstract">Abstract:</label> <textarea rows="5" cols="80" name="abstract">
                    		</textarea>
		        </p>
                	<p>
		      		<label for="Abstract">File for attachement:</label><input type="file" name="file" id="file"/>
		        </p>
                	<p>
		      		<label for="startdate">Joining date:</label> <input type="datetime-local" name="user_date"/>
		        </p>
                 	<p>
		      		<label for="startdate">Search:</label> <input type="search" name="user_search"/>
		        </p>
                  	<p>
		      		<label for="product color">Color:</label> <input type="color" name="user_search"/>
		        </p>
                
                	<p>
                    		<input type="submit" value="submit"/>
                	</p>
                       </fieldset>
		</form>
	
	</body>
</html>



//Page Design Using html 5



15th July 2025
what we have done last day ?

#JAVA
 Array
 VarArg .
 String,StringBuffer,StringBuilder
 == equals()
 HandsOn -


#Agile
Agile Values
Agile Principles
Agile vs. Waterfall Methodology
How to Write Effective User Stories
Writing Acceptance Criteria for User Stories


#UI-HTML5CSS3Bootstrap5
part-2
   -CSS3 Structure
   -Media Queries - style for all screen size and devices
   -Project

Part3
   -What is Twitter Bootstrap ?
   -getbootstrap.com
   -base markup and css
   -navbar & dropdowns
   -rows , grids and media objects
   -List groups & glyphicons
   -Forms , Tooltips , Popovers
   -Models & Tabs
   -Accordions
   -Project




 Array
 VarArg
 HandsOn -


			//Array
			          - It is  used to collect similar type of elements.
                                  - Array index will always start from 0.
                                  - c programming  array -    primitive
			          - java programming array - object
                                  - array is collection of elements of fixed length once created 
                                                                     can not be changed.



                                //array of int
			          int    a[] =   new    int[5];
				  a[0] =  20
				  a[1] =  21
				  a[2] =  22
                                  a[3] =  23
				  a[4] =  24
			          stem.out.println(a[3]);



			       //array of String 
				String   s []= new  String[4];
				    s[0] = "srini";
				    s[1] = "nikihil";
				    s[2] = "navin";
				    s[3] = "max";
				System.out.println(s[2]);



			         //Array of User defined Class Object
				class  Shirt{
                                                                  
				}

				Shirt    sh[] = new Shirt[3];
				sh[0] = new Shirt(100,300.00,45,"yel",6);
				sh[1] = new Shirt(101,300.00,45,"red",6);
				sh[2] = new Shirt(102,300.00,45,"gre",6);
		                System.out.println(sh[1].getColor());





                         //Two D  Array:

				int     a[][] = new int[2][2]; 
			        // row = 0 , 1    //column = 0,1

				a[0][1] = 99;
                                a[0][0] = 100;

			       System.out.println(a[0][0]);




java 5     Var  Arg  = Variable Argument



	
			class   AA{

				static void  show(int arr[]){
					for(int i : arr){
						System.out.println(i);
					}

				}

				public static void main(String args[]){

					int  a[]= {20,30,40,50,60};
					show(a);

				}
			}












           
		

			        //Variable Arguments or   VarArgs
                                  -  from java 5 
				  -  Var Arg is used to remove array implementation in Java.
				  -  Var  Arg is defined using 3 dot.



                         //pass arg using array
			  class     Demo1 {
				static void show(int x[]){
					for(int  i  :  x){
						System.out.println(i);
					}
				}
				public static void main(String args[]){
					int    a[] = {20,30,40,50}
					show(a);
				}
			  }          


   
			//pass arg using VarArg
			class     Demo2 {

				static void show(int ... x){
					for(int  i  :  x){
						System.out.println(i);
					}
				}

				public static void main(String args[]){
					//int    a[] = {20,30,40,50}
					show(20,30,40,50);
				}

			  }             




		// Limitation  Of Array :
			=>  Collection of Elements Of Fixed Length

				

		
	    Hands On : Time : (15 min): Assignment 8

			Write a program that takes as input the size of the array and the elements in  
                        the array.
			The program then asks the user to enter a particular index and prints the element 
			at that index. Index  starts from zero. 

			Sample Input and Output 1:
			Enter the number of elements in the array
 			 2
			Enter the elements in the array
  			50
  			80
			Enter the index of the array element you want to access
    			1
			The array element at index 1 = 80
			The array element successfully accessed





                     [Break - 10 mins]





#Agile  1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11.  12. 13. 14.  15. 16. 17. 18. 19. 20 21. 22. 23. 24. 25. 26. 27.  
Agile Values
Agile Principles
Agile vs. Waterfall Methodology
How to Write Effective User Stories
Writing Acceptance Criteria for User Stories




		  




Agile Values (from the Agile Manifesto)
1.Individuals and interactions over processes and tools
Focus on collaboration and effective communication within teams rather than relying heavily on tools and rigid processes.

2.Working software over comprehensive documentation
Deliver functional products that provide value, rather than spending excessive time creating detailed documentation.

3.Customer collaboration over contract negotiation
Engage customers regularly for feedback and alignment, instead of depending solely on contract terms.

4.Responding to change over following a plan
Adapt to evolving needs rather than strictly adhering to initial plans.


























Agile Principles (12 Key Principles)
1.Customer satisfaction through early and continuous delivery
Deliver valuable software frequently to ensure ongoing customer satisfaction.

2.Welcome changing requirements, even late in development
Embrace change to give customers a competitive advantage.

3.Deliver working software frequently
Release small, functional increments regularly (from weeks to a couple of months).

4.Close, daily cooperation between business people and developers
Promote direct and constant collaboration.

5.Build projects around motivated individuals
Support and trust the team to deliver quality outcomes.

6.Face-to-face conversation is the most effective communication method
Prioritize direct interaction for clarity and efficiency (in-person or virtual).

7.Working software is the primary measure of progress
Focus on actual functionality delivered, not just plans or documentation.

8.Sustainable development pace
Ensure the team works at a consistent, maintainable pace.

9.Continuous attention to technical excellence and good design
Maintain high-quality code and design standards for agility and scalability.

10.Simplicity—the art of maximizing work not done—is essential
Avoid overcomplicating solutions.

11.Self-organizing teams produce the best architectures, requirements, and designs
Empower teams to make decisions and take ownership.

12.Regular reflection and adjustment
Teams should reflect periodically on their performance and refine processes for improvement.






#Agile vs. Waterfall Methodology: Key Comparison
Agile Methodology						Waterfall Methodology

Iterative and incremental					Linear and sequential

Highly adaptive to changes at any stage				Limited flexibility after the planning phase

All phases (planning, development, testing, etc.) run 
concurrently in short cycles (sprints)				Phases are strictly sequential (requirements → design → implementation → testing → deployment)

Continuous involvement throughout development			Minimal involvement after initial requirements gathering

Frequent small releases of working software			Single, final delivery after the entire project

Continuous feedback and improvement				Feedback usually after project completion

Early detection of issues due to iterative reviews		Risks often identified late in the project




























When to Use Agile:
When requirements are expected to evolve.
For complex projects requiring regular customer feedback.
When rapid delivery of working solutions is important.

When to Use Waterfall:
When requirements are fixed and well-understood.
For regulatory or compliance-driven projects needing detailed documentation.
In environments where scope and deliverables are unlikely to change.




























#How to Write Effective User Stories
A User Story is a short, simple description of a feature or functionality told from the perspective of the end user. 
It focuses on what the user wants to achieve and why, rather than how to build it.


#User Story Format (INVEST Model)
Standard Format:
As a [user role], 
I want [goal or feature] 
so that [benefit or reason].



Example:
As a student, 
I want to receive email reminders for assignment deadlines
so that I can submit on time.

Example:
As a [customer],
i want [shopping cart features]
so that [i can easily purchase items online.]

Example: E-Com
As a manager ,
i want to generate report
so that i can understand which department need more resources.

Example: food delivery system
As a [customer] ,
i want to [receive an SMS ]
so that [i can pick it up right away.]


 
#INVEST Principles:
Independent – Should be self-contained. should not have any dependency on other user story.
Negotiable – Not a strict contract, open for discussion.
Valuable – Delivers clear value to the user.
Estimable – Team should be able to estimate the effort.
Small – Manageable and completable within a sprint.
Testable – Clear enough to validate through testing.(should have necessary info to validate)



#Best Practices for Writing User Stories
Focus on one specific user goal per story.
Avoid technical details; keep it user-focused.
Keep stories concise yet clear.
Ensure the story can be tested and validated.
Collaborate with customers or product owners for clarity.



HandsOn:- Create 5 User Story for your project.



















#Writing Acceptance Criteria for User Stories
Acceptance Criteria define the conditions that must be met for a user story to be considered complete and working as intended.





#Characteristics of Good Acceptance Criteria:
Clear, specific, and measurable.

Testable (can be validated through manual or automated tests).
Focused on user behavior and business rules.
Common Formats for Acceptance Criteria:

1. Given/When/Then Format 
Given [context],
When [action],
Then [expected outcome].


As a student, 
I want to receive email reminders for assignment deadlines
so that I can submit on time.


Example:
Given [that I am logged into my account,]
When [I view my upcoming assignments,]
Then [I should see email reminder status for each assignment.]


2. Bullet Point List Format
Email reminder is sent 24 hours before the deadline.
User can opt in/out of email reminders.
Reminder email contains assignment name and due date.
If deadline is within 24 hours, email is sent immediately.

























Example - Complete User Story with Acceptance Criteria:

User Story:
As a student, I want to receive email reminders for assignment deadlines so that I can submit on time.

Acceptance Criteria:
Given [I am a registered student,]
when [an assignment deadline is within 24 hours,]
then [I should receive a reminder email.]
Email reminders include assignment name and due date.
User can enable/disable reminders from the settings page.




User Story:
As an online shopper, I want to add items to a wishlist so that I can purchase them later.

Acceptance Criteria:
Given [I am logged into my account,] 
when [I click “Add to Wishlist” on a product,] 
then [the product should appear in my wishlist.]
Wishlist items should display the product name, price, and image.
If a product is already in the wishlist, the “Add to Wishlist” button should be disabled or changed to “In Wishlist”.
I should be able to view and manage my wishlist from my account menu.
Removing an item from the wishlist updates the list immediately.



HandsOn: Create 5 acceptance criteria for your project.






#Key Agile Metrics
Agile metrics help teams track progress, predict delivery, and improve performance. 
Two of the most commonly used metrics are Velocity and Burndown Charts.


1. Velocity

What It Measures:
The amount of work (usually in story points) completed by a team in a single sprint.

Why It’s Useful:
Helps in predicting future sprint capacity.
Supports release planning.
Identifies productivity trends.

Example:
If a team completes 40 story points in Sprint 1 and 42 in Sprint 2, their average velocity is 41 points.


2. Burndown Chart

What It Measures:
Shows remaining work versus time within a sprint or project.

How It Works:
X-axis = Time (e.g., sprint days).
Y-axis = Remaining work (story points or tasks).
Line trends downward as tasks are completed.

Why It’s Useful:
Provides a visual representation of sprint progress.


Helps identify scope creep or bottlenecks.
Useful in daily stand-ups and retrospectives.
Types:
Sprint Burndown Chart: Tracks work during a sprint.
Release Burndown Chart: Tracks progress toward a larger release.






1. Need for Maintenance:

Correcting Defects: Fixing bugs or issues discovered after software deployment.

Adapting to Environment Changes: Modifying software to work with new operating systems, databases, browsers, or hardware.

Enhancing Performance: Improving efficiency, response time, or optimizing resource usage.

Adding New Features: Extending the software’s functionality based on evolving business needs.

Ensuring Security: Updating software to protect against emerging security threats.

Legal/Regulatory Compliance: Modifying software to comply with new regulations or standards.




2. Challenges in Software Maintenance

Understanding Legacy Code: Original developers may not be available, and documentation may be outdated.

High Complexity: Interdependencies between modules can make changes risky.

Limited Documentation: Incomplete or outdated documentation increases maintenance difficulty.

Regression Risks: Fixing one issue can unintentionally introduce others.

Resource Constraints: Limited budgets, skilled personnel, or tools for maintenance.

Change Management: Ensuring version control and proper tracking of all changes.




3. Categories of Software Maintenance

Category	Description
Corrective	Fixing defects or errors reported by users post-deployment.
Adaptive	Modifying software to adapt to changes in environment.
Perfective	Enhancing functionalities or performance based on user feedback.
Preventive	Making changes to improve future maintainability and prevent potential problems.

























#CSS

  Introduction to CSS
  Styles and StyleSheets
  Formatting with CSS
  Links and Lists
  CSS Box Model
  CSS3

  CaseStudy : Your Project Web Page 
                                     




//CSS  and CSS 3 Features 
		   -World Wide Web Consortium(W3C) introduced CSS

			- It is used to format(create good look and feel) the web page 
			-  CSS1          - 1996
			-  CSS2          - 1998
			-  CSS3          - 1999



                   - Formatting these HTML Pages will be a laborious process, as formatting elements
			need to be applied to each and every page.
			- selector - 
			- declaration -

		       // myhtml.html	

			<!DOCTYPE html>
			<html>
			<body> 
				<h1>  CSS is used to Create Good Look and Feel </h1>
			</body>
			</html>

		

                        //mycss.css
	
			 h1  selector
			 {
                                color  :   red         declaration(property : value)
			 }



CASE-1  lab-5 min(2.35-2.40)

<!DOCTYPE html>
<html>
    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        
        <style>    
            h1 {
                color : blue;
                text-align: center;
            }
        </style>
    </head>
    
    <body>
        <h1> Welcome To Css World !!! </h1>
    </body>
</html>		
		


			







		
 //  Styles and StyleSheets
                 - There are two types of selectors :     id and class.

 //web page that use selector id.
             CSS id selector is used to specify a style for a single elements

 //web page that use selector class
             CSS class selector is used to specify a style for a group of elements


CASE-2  5 min (2.46- 2.51)
<!DOCTYPE html>
<html>
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>
            #paragraph{
                text-align:center;
                color: magenta;
                font-family: serif;
                font-size: 20px;   
            }  
            #paragraph1{
                text-align:center;
                color: blue;
                font-family: serif;
                font-size: 20px;   
            }
        </style>
    </head>
    <body>
        <p id="paragraph1">  Total  Expense Of Last Months Travel </p>
        <p id="paragraph">  Rs 100000.80 </p>
    </body>
    
</html>



CASE-3 class selector (2.54-2.59)

<!DOCTYPE html>
<html>
    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        
        <style>
            .custom{
                text-align: center;
                color: aqua;
                font-family: sans-serif;
                font-size: 30px;
            }
        </style>
    </head>
    
    <body>
        
         <h1 class="custom"> Atos Global IT Solution </h1>
          <p class="custom"> Whitefield </p>
          <p class="custom"> Bangalore</p>
        
    </body>
    
</html>





//Types Of Style Sheet
            A. internal style sheet - defined inside he same html file
                                    - using <style> element

            B. external style sheet  - define    css inside a external .css file.

            C. inline style sheet -  we define style attribute in the required tag.




//external style sheet  - define    css inside a external .css file.
           

<!DOCTYPE html>  5 min  (3.09 - 3.14)
<html>
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <link rel="stylesheet" type="text/css" href="css/index4.css" />   
    </head>
    <body>
        <p>
        Atos India is a subsidiary of Atos SE – head quartered in Paris, France – a leader in digital services serving a global client base. Atos is present in India since 1991, operating as a strategic Global Delivery Center for clients from a wide range of industry verticals across Europe, Americas, Asia Pacific and Middle East. Atos has also established itself as a key technology partner to some of the leading industries in the Indian subcontinent.
        </p>
          <p>
        Atos India is a subsidiary of Atos SE – head quartered in Paris, France – a leader in digital services serving a global client base. Atos is present in India since 1991, operating as a strategic Global Delivery Center for clients from a wide range of industry verticals across Europe, Americas, Asia Pacific and Middle East. Atos has also established itself as a key technology partner to some of the leading industries in the Indian subcontinent.
        </p>
    </body>
</html>

index4.css
p{
    text-align:left;
    font-family:'Times New Roman', Times, serif;
    font-size: 30px;  
}



//inline style sheet 5 min(3.25 - 3.30)
<!DOCTYPE html>
<html>
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
    </head>
    <body>  
        <h1 style="text-align: center;font-size: 30px">Cognizant Global  IT  Solution </h1>
        <h2 style="text-align: center;font-size: 20px">Talent Transformation</h2>
        <p style="text-align: center; font-size: 10px">
        Cognizant India is a subsidiary of Atos SE – head quartered in Paris, France – a leader in digital services serving a global client base. Atos is present in India since 1991, operating as a strategic Global Delivery Center for clients from a wide range of industry verticals across Europe, Americas, Asia Pacific and Middle East. Atos has also established itself as a key technology partner to some of the leading industries in the Indian subcontinent.
        </p>
    </body>
</html>


//Formatting with CSS

                                 css - background  
                                         background-color
                                         background-image 
                                         background-repeat 
                                         background-position


                                css - text formatting
                                Color
				Alignment 
				Decoration 
				Transformation
				Indentation





CASE-4  5 min 

<!DOCTYPE html>
<body>
    <style>
             h1 {
                background-color: cornsilk;color: cyan;text-align: center;
            }
        
            h2{
                background-color: cadetblue;color: aqua;text-align: center;
            }
            
            p{
                background-color: beige;color: blue;text-align: center;
            }
           
    </style>

</body>

        <h1>Atos Global  IT  Solution </h1>
        <h2>Talent Transformation</h2>
        <p>
        Atos India is a subsidiary of Atos SE – head quartered in Paris, France – a leader in digital services serving a global client base. Atos is present in India since 1991, operating as a strategic Global Delivery Center for clients from a wide range of industry verticals across Europe, Americas, Asia Pacific and Middle East. Atos has also established itself as a key technology partner to some of the leading industries in the Indian subcontinent.
        </p>
      
        
</html>





CASE-5  TEXT DECORATION 5 min 
<!DOCTYPE html>
<html>
    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>
       
            p{
                text-decoration: line-through;
                text-transform: capitalize;
                text-indent: 300px;
                font-style: italic;
            }
            
            h1{
                text-decoration: underline;
                text-transform: lowercase;
            }
            
            h2{
                text-decoration: overline;
                text-transform: uppercase;
            }
        </style>
    </head>
    <body>
	<h1>Atos Global  IT  Solution </h1>
        <h2>Talent Transformation</h2>
        <p>
        Atos India is a subsidiary of Atos SE – head quartered in Paris, France – a leader in digital services serving a global client base. Atos is present in India since 1991, operating as a strategic Global Delivery Center for clients from a wide range of industry verticals across Europe, Americas, Asia Pacific and Middle East. Atos has also established itself as a key technology partner to some of the leading industries in the Indian subcontinent.
        </p>
</body
</html>


case-6   5 min  ( 3.50 - 4.00)

<!DOCTYPE html>
<html>
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>      
            ul.a{
                list-style-type: circle;
            }
            ul.b{
                list-style-type: square;
            }
        </style>
    </head>
    <body>
        <h1> Technical Courses Offered </h1>
        <p>Category A (language)</p>
        <ul class="a">
            <li>JAVA</li>
            <li>.Net</li>
            <li>Python</li>
            <li>SQL</li>
        </ul>
        
        
        <p>Category B (frameworks)</p>
        <ul class="b">
            <li>Spring</li>
            <li>Hibernate</li>
            <li>Application Development Framework</li>
        </ul>
      
    </body>
    
</html>
        
     
CASE-7  box model   5 min  (4.00-4.05)
<!DOCTYPE html>
<html>
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>
            
            img.large {
                height: 400px;
                width: 500px;
                padding-top:40px; 
                padding-bottom:25px; 
                padding-right:15px; 
                padding-left:10px; 
                border-style:solid; 
                border-width:5px; 
                border-color:red;
                margin : 40px 30px 20px 10px;       
            }
            img.normal{
                height:auto;
                width:auto;
            }
        </style>
    </head>
    
    <body>
         <img class="normal" src="images/ship.jpg"/>
         <img class="large" src="images/ship.jpg"/>
    </body>
    
</html>
        

CASE-8

//CSS   Links and Lists    5 min (4.15-4.20)

			<a href="https://www.atos.net" >Home</a>

			a:link – Unvisited link                                      yellow
			a:visited – A link that the user has visited                 red
			a:hover – A link over which the mouse pointer moving
			a:active – A link, which has been just clicked               green


<!DOCTYPE html>
<html>
    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>
        
            a:link {color:yellow}
            a:visited {color:blue}
            a:hover {color: red}
            a:active {color: green}
            
        </style>
    </head>
    
    <body>
           <a href="login.html">Please click here for login </a>
    </body>
</html>
    

CASE-9   Border Radius - 5 min  

<!DOCTYPE html>
<html>
    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>
            
            div{
                border : 2px solid #111111;
                background-color: blue;
                width: 300px;
                /*border-radius: 25px;*/
                padding: 40px 40px;
                border-top-left-radius:20px;
                border-top-right-radius:20px; 
                border-bottom-right-radius:50px; 
                border-bottom-left-radius:50px;
            }
        </style>
    </head>
    
    <body>
        <div>
            Our experience and expertise spans across industry verticals such as MRT, FS, TMU, Engineering, Public, Health and Education with focus on enabling Digital Transformation, Technology Transformation Services, Applications Services , IT Infrastructure Services, Big Data and Cyber Security and High Performance Computing.
        </div>
    </body>
</html>


CASE-10   TEXT SHADOW  5 min

<!DOCTYPE html>
<html>    
    <head>
        <title>GETTING STARTED WITH BRACKETS</title>
        <style>    
            h1 {
                text-shadow: 10px 15px 2px #0356fc;
            }
            div {
                width: 200px;
                height: 300px;
                background-color: yellow;
                box-shadow: 40px 20px 25px 10px #0356fc;
            }
        </style>
    </head>
    <body>
        <h1>
            Our experience and expertise spans across industry verticals such as MRT, FS, TMU, Engineering, Public, Health and Education with focus on enabling Digital Transformation, Technology Transformation Services, Applications Services , IT Infrastructure Services, Big Data and Cyber Security and High Performance Computing.</h1>
        <div>
            Our experience and expertise spans across industry verticals such as MRT, FS, TMU, Engineering, Public, Health and Education with focus on enabling Digital Transformation, Technology Transformation Services, Applications Services , IT Infrastructure Services, Big Data and Cyber Security and High Performance Computing.
        </div>
        
      
    </body>
    
</html>




What we have done last day ?

#JAVA

#GIT

#Bootstrap

 





























                                              


                                    

			
                                         
                                       //List   Using  CSS

                                                    ordered list (<ol>)      or    unordered list (<ul>)
                                                    list-style-type
                                                    list-style-image

		               
			<!DOCTYPE html>
			<html>
                                                               <head>
				<style>
					ul.a{
						list-style-type:circle;
                                                                                               }
					ul.b{
						list-style-type:square;
					}
                                                                           </style>
                                                               </head>
			<body> 
				<h1>  Courses Offered By Atos BTLC </h1>
				<p> Category User Interface  </p>
                                                                           <ul class="a">
				           <li>Anguler JS</li>
				           <li>Ext JS</li>
				           <li>React JS</li>
                                                                           </ul>
                                                                           <p> Category middleware  </p>
				  <ul class="b">
				           <li>Spring</li>
				           <li>Micro service</li>
				           <li>REST WS</li>
                                                                           </ul>
			</body>
			</html>


		//CSS  Box Model

			A.  CSS   height and width
			B.  CSS   padding 
				- sorrounding space of content
				padding-top:20px; 
				padding-bottom:30px; 
				padding-right:25px; 
				padding-left:10px;

					  top   right  buttom left
                                                                           - padding:  20px  25px 30px 10px
			C.  CSS  Border
				- border-style:solid; 
				  border-width:5px; 
				  border-color:red;

			D.  CSS  Margin

				margin-top:20px; 
				margin-bottom:30px; 
				margin-right:25px; 
				margin-left:10px;
                                                                                            top    right  buttom left
				margin:  20px  25px 30px 10px

                                // CSS3  Features:

                                                          A. border-radius
				border-radius: 5px;
                                                          B.  text-shadow
				text-shadow: 10px  20px  5px  blue;
			  C. box-shadow
				box-shadow: 10px 10px 5px 20px green;
			
			  D. border-image
				border-image-source,border-image-width, border-image-repeat , properties. 
				border-image:url(m2.jpg) 30

			  E. transform:rotate 
				transform:rotate(70deg)

			  F. transform:skew
				transform:skew(35deg,25deg);

			  G. CSS3 Transitions
				CSS3 transitions are effects that let an element
				gradually change from one style to another.

				div:hover{
					width: 200px;
					height: 200px;
					transform:rotate(180deg)
				}

			NEXT :  
			Case Study Project(Html5,CSS3) =>

                                                Responsive Web Page Design

			
                                                 mobile (240-568)                 tablets (569-767)                     desktopscreen(768-960)
                                                                       
                                                                                       

                                                 @media only screen and (min-width: 768px) and (max-width: 960px){

                                                             //desktop css logic
                                                  }                                             
 
                                                  @media only screen and (min-width: 569px) and (max-width: 767px){

                                                             //tablets css logic
                                                  }       
                                                                        
                                                   @media only screen and (min-width: 240px) and (max-width: 568px){

                                                             //mobile css logic
                                                  }   

16th July
What we have done last day ? 3 participants
Topics:

#JAVA
OOPs-Polymorphism 
 Function Overloading
 API Example Of Function Overloading
 Runtime Polymorphism
 API Example Of Runtime Polymorphism
 HandsOn - 10
 final
 OOPs-Encapsulation , Abstraction 
 Abstract class and interface
 HandsOn - 11

#Java Script
-Java Script Introduction
-scripting language and programming language    
-<script> to include JS inside html
-variable creation features
-data types
-<noscript>
-conditional statement
  if else
  else if else
  switch
- iterative statement
  for

#Bootstrap
   -What is Twitter Bootstrap ?
   -getbootstrap.com
   -base markup and css
   -navbar & dropdowns
   -rows , grids and media objects
   -List groups & glyphicons
   -Forms , Tooltips , Popovers
   -Models & Tabs
   -Accordions
   -Project


















 //OOPs-Polymorphism 
			
			 Every day  how many interaction you do?


				Navin(CEO)                          Max(Student)
				    
				   P					P			
				   W					C
				   C					F
				   D					T
				   C					S
				   C					B
				   



                              OOPs-Polymorphism:

                                    - Same person do different interaction

					Polymer -  C  -   3   Different   State  [C , D, N]

				    - Same function will do different task.
				    - Two types of Polymorphism.
						A. function Overloading or Compile Time Polymorphism
						B. function Overriding or  Runtime Polymorphism











			//Function Overloading  or Compile time Polymorphism
                                 - same function name do different task.
			         - func return type can be different.
				 - based on number of arg and type of arg one of the func 
                                         get selected during compile time.
				



			class   Calculator{
				
				static int   sum(int a,int b){return    a+b;}

				static  float  sum(float a,float b){return a+b;}

				static  float  sum(int a,float b){return  a+b;}


				public static void main(String args[]){

                                                sum(7.0f,9.0f);
				                sum(99,88.0f);
				                sum(17,19);
				}
			}




			//API  Exampple of Compile Time Polymorphism

				System.out.println(23);
				System.out.println("Hello");
				System.out.println(200.00);



                         //Constructor Overloading

				- constructor name is same.

				- based on constructor arg and type of arg one of the constructor
				   get selected during compiletime.



                Overloading /Hands On - 7 : 5 min

				write  a program that use overloaded method for 
				printing different type of array (integer,double,character)









			//Function Overriding
				- same function do different  task
				- inheritance(base class,derived class)
				- when base class and derived class contain same function name
				  with same method signature then   derived class method is overriden 
                                                                             from base class method   with its own code.
                                                                           


			       class    Shape{

				void area(){
				    System.out.println("Inside Shape");
				}

			       }
			        class   Circle extends Shape{

                                     void area(){
				    System.out.println("Calculate Circle  Area");
				     }

			        }
			



                            //Runtime Polymorphism

				-DMD - Dynamic Method Dispatch

				- Always base class ref will point to derived class object.
				 but the reverse is not true.

				 Shape   sh = new   Circle();   correct
				 Circle c = new   Shape();  not correct







				When an overridden method is called through a superclass reference, 
				Java determines which version of the method to call based upon the 
				type of the object being referred to at the time the call occurs.



		               class    Shape{
				void area(){
				    System.out.println("Inside Shape");
				}
			       }

			        class   Circle extends Shape{
                                  void area(){
				    System.out.println("Calculate Circle  Area");
				}
			        }

			        class   MainDemo{

				public static void main(String args[]){
                                       
					Shape   sh = new   Circle();
					sh.area(); 
				}
			        }



                        API  Example Of  Runtime Polymorphism:
                                           toString()



			
			Object class :
				- Any class in Java by default extends another class ie Object class.
				- Module java.base   Package java.lang
				-  11 methods   like toString()
			 







		HandsOn - 8: Runtime Polymorphism

			Create  a base class Fruit which has name ,taste and size as its attributes .
                        A method called eat() is created which describes the name of the fruit and its taste. 
                        Inherit the same in 2 other class Apple and Orange and  override the eat() method
			 to represent each fruit taste.   



 what we have done last day ?

 NEXT :

 final
 OOPs-Encapsulation , Abstraction 
 Abstract class and interface
 HandsOn

 Inner Class and Annonymous Class

 
			final :
			             - It is a   keyword in java.
			             - final class can not be extended.
			             - final data member value can not be changed.
			             - final method can not be overriden.
			



class  Account{
	
	int accountId=1001;
	
	void openAccount() {
		
	}	
}

class  SavingAccount extends Account{
	
	
	void accOpen() {
		
		accountId=1002;
	}
	
	void openAccount() {
		
	}
	
	
	
	
}


			


                                                         
                         #OOPs-Encapsulation , Abstraction 
 			 

                                                          Abstraction  -  Expose the functionality to the outside world.

                                                          Data Hiding - hiding the details or function inside the object.


                                                          Encapsulation  =    Abstraction   +  Data Hiding
                                                                           abstract ,interface       private




                                                           //Abstraction Using Abstract Class
                                                                 - abstract  is a keyword in java.
                                                                 - abstract keyword before a class name define abstract class.
                                                                 - it has 2 types of method
                                                                              1. Method with definition
                                                                              2. Method with declaration

                                                                 - method with declaration must be abstract.

                                                                 - any class extends an abstract class must have to override
                                                                   all the abstract method declared in the abstract class.
                                                                 - we can not create an object of an abstract class but we 
			           can create an ref of an abstract class.
                                                                 - any class that have abstract method , must be abstract.
                                                                



                                                          abstract  class  Account {
                                                                    private  int  accId;
                                                                    void  closeAcc(){    \\method with definition
                                                                     }
                                                                    void openAcc(){
                                                                     }
                                                                    void checkBalance(); \\method with declaration
                                                           }




                                                           limitation: Abstract class does not support the multiple inheritance. 






			        //Abstraction Using interface(till java7)
                                                               - interface is a keyword
                                                               - interface support multiple inheritance.
                                                               - by default interface variable are public static final.
			       					- till java 7  interface have only method with dec. 
                                                             -   by default , interface method is public and abstract.
                                                               - any class implements an interface must have to 
                                                                  override all the methods declared inside the interface.
                                                               - we can not create an object of an interface


public interface Account {
	
	int a=20;
	
	void  openAccount();
	void  closeAccount();
	
}

class  SavingAccount  implements Account{

	@Override
	public void openAccount() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void closeAccount() {
		// TODO Auto-generated method stub
		
	}
	
	
}








                                         difference of interface and abstract class

                                                      1.   80% work need to be done - interface
                                                      2.   20% work need to implement.- abstract class 






                                                      handson:
                                                        Create an interface Compartment to represent a rail coach. 
                                                        Provide an abstract function notice in this class. 
                                                        Derive FirstClass, Ladies, General, Luggage classes from the compartment class. 
                                                         Override the notice function in each of them to print notice suitable to the type
                                                         of the compartment.
							Create a class TestCompartment . 
							Write main function to do the following:
							Declare an array of Compartment of size 10.
                                                        Create a compartment of a type as decided by a randomly generated integer 
                                                        in the range 1 to 4.
                                                        Check the polymorphic behavior of the notice method
           

 	



// Bootstrap 
                                                              - It is a framework or pattern.
                                                              - reusability.
                                                              - Twitter Bootstrap  officially released as opensource in 2011
                                                              -  Mark Otto  and Jacob Created Bootstrap

                                                              Bootstrap   ===  html5 + css3  + java script

                                                              - versions   3.x   4.x    5.x
                                                              - www.getbootstrap.com

                                                        Why bootstrap  ?
                                    
                                                               A. Mobile first approach
                                                               B.  Browser Support  - support all the popular browsers
                                                               C. Easy to Get Started 
                                                               D. Responsive Design - bootstrap responsive css can
                                                                                                          adjust a Desktop, tablets or mobile

                                                        Set Up Of Bootstrap:

                                                               A. https://getbootstrap.com/docs/3.4/getting-started/
			       B.  download   bootstrap-3.4.1-dist
                                                               

   -What is Twitter Bootstrap ?
   -getbootstrap.com
   -base markup and css
   -navbar & dropdowns
   -rows , grids and media objects
   -List groups & glyphicons
   -Forms , Tooltips , Popovers
   -Models & Tabs
   -Accordions
   -Project

                    


17th July 2025
what we have done last day ?

#GIT
DevOps
Version Control System
build tools
HandsOn- 

#Bootstrap
HandsOn- Bootstrap project should have min 20 layout.(except 5)

TechDemo:
DevOps
Agile 
Bootstrap
SDLC
UserStories



#GIT
DevOps
Version Control System
build tools



Software Project Management

	1. SDLC - 3/4 months
        2. Agile - 2-4 weeks
        3. DevOps - 1 day

DevOps Project : Cloud Native Application : 4 Pillar

           MicroService + Containerization with Docker + Cloud + DevOps Using CICD
									 GIT									
	



DevOps : 
           -  It is not a tool or technology 
           -  It is a new culture / process to develop , release and maintainance 
                     of software application/project with higher quality , faster way.

           - we achieve by using automation tools.
                  

               DevOps = developer(plan/code/build/test) +operations(release/deploy/operate/monitor)



#why we need devops ?
                  - required to know existing  sdlc models.
                               -(old model)water fall model(1950-60)
                               -(current model) agile model

                  //Agile model
                  - Most frequently used model .(last 15 years)
                  - It is the combination of multiple sub model
                                 - Rational Unify Model (Rup)
                                 - Adaptive Software Development(ASD)
                                 - crystal clear
                                 - scrum
                  - scrum is the most popular agile framework
                  - continuous delivery
                  - continuous feedback
                  - requirements changes in the model
                  - less development time
                  - less development cost
                  - client satisfaction is very high


                  Why we need to go with devops ?  

                 - devops and agile both are different model.

                 - both the model support rapid software development
                 - the different between both the model come after development.
                 
                                         DevOps                     development   +  operation  

                                         agile                      development   +  no operations




                 - in agile model separate team is responsible for separate task
                                                                      like dev , test , deployment etc
                 - devops person is responsible for all the task from dev to operations.
                 - agile does not force automation  but devops is completely based  on automation.

                 - agile     --->  speed --
                 - devops  ---> quality + speed 




                  //DevOps 
                   - it is a new culture or process
                   - it is the process of continuous development , continuous 
                          build , continuous test , continuous release of software etc.
                   - devops is automation tools.
          

                    what are the main tools we need to know to be devops engineer ?

                      1. version control system
                      2. build tools
                      3. configuration management tool etc





                     //version control system
                                     /software configuration management
                                                          /Source Code management

                    -  need of VCS
                    -  How VCS work ?
                    -  Benefit of VCS
                    -  Types of VCS
                    -  Difference between centralized and distributed VCS




		  CODE :   v1

		  Customer Meeting 

		  CODE :   v2

		  Customer Meeting 

		  CODE :   v3

		  Customer Meeting 

		  CODE :   v4

		  Customer Meeting 

		  CODE :   v5




                    // Need of VCS
                    - project module completed and demo done to client
                    - client suggested some changes
                    - project module updated and demo done to client
                    - client suggested some changes
                    - project module updated and demo done to client


                    - every version should be maintained.
                    - but maintaining multiple version is difficult task.
                    
                   Dev1  -->  abc.java
                   Dev2  ---> abc.java  

                   - to maintain different version of code we need VCS.
                   - override of the code should not happen.
                   - developer have share their code to peer developer
                     so that multiple developer will work in collaborated way.
                   - parallel development must be required.
                   - to manage our code , such type of source code management system is version control system.











------------------------------------------------------------------------------------
              

//How VCS work ?
                  - we will follow a tool to manage the version.
                  - it is not only for code 
                  - any document if i want to maintain multiple version  
                          tester  >>
                          developer >>
                          Project Manager >>
                  
                   - [work space ]  - used to write code.
                                    - maintain multiple file

                   - [repository] - VCS is applicable
                                  - maintain multiple file

                   - developer save all the files in the repository.
                   - in repository all the data is stored as commit
                      and one unique number is generated for each commit ie version1

                   - commit - sending data from ws to repo

                   - after demo to client
                   - again  all the data is stored as commit
                      and one unique number is generated for each commit ie version2

                    - each details about the commit is stored.
                    - so each commit version we can deliver demo to  client  from repository.

                     - checkout - the process of sending file from 
                                             repository to workspace.

                    - we need a mechanism to do the process.
                                      ie Version Control System.
                    





------------------------------------------------------------------------------------------------------------------------
                   //Benefit of VCS
                   - we have different version and we can choose any 
                     version based on client requirement.
                   - with every version we can maintain metadata about code.
                   - multiple developer can work in collaborate way
                   - dev can share the code to the peer developer
                   - we can make access control ie who can update code or who can modify code.
 


-----------------------------------------------------------------------------
         // Types of VCS

                   1. Central Repository Server
                                 - version control happen only in one place.
                                 - all the operations happen in Central Repository
                                 - easy to setup and easy to maintain
                                 ie  CVS , SVN , Perforce

		                         Central Repository Server
                                               commit
               [ Work Space]   --------------->  [   v1 , v2 ,  v3 , v4  ]
                                              <---------------
		                   checkout

                                              commit
               [ Work Space]    -------------->
                                               <---------------
		                 checkout

		                commit
               [ Work Space]   --------------->
                                              <-----------------
		               checkout

                                             commit
                [ Work Space]   --------------->
		        <-------------------
		       checkout




-------------------------------------------------------------------------------------------------
          Limitation of Centralized VCS

          -  The total code stored at a single place ,  some thing wrong cause single point of failure.

          -  All the dev should be connected with the centralized version  control system.
             if network down , version control won't be available to dev.

          -  All checkout and commit operations performed over network.
             low performance.

          - as  the number of file increase then for huge project  this centralized VCS have multiple problems.



--------------------------------------------------------------------------------------------------
       2. Distributed VCS
	- here all workspace have a local repository.
                   - all the versions are maintained in the local repository
                   - even network down then also repository available.
                   - all commit and check out is performed in the local repository
                   - no ques of single point of failure.








	How multiple dev will  work in collaboration ?
                         - all the changes from WS1 will marge into WS4
                         - push and pull operation between two dev - network required
                         - checkout and commit operation - network not required

                                                                                   push
                      WS1[Files,Repository]                     ---->                    WS4[Files,Repository]
                                                                <-----
                                                                                      pull
                      WS2[Files,Repository]                                                 WS5[Files,Repository]
                      WS3[Files,Repository]                                                 WS6[Files,Repository]


          Which tool follow this model  ?
                             1. GIT , Fossil  etc















 //Distributed VCS with Remote Repository:
                        -  it is used to share our code to peer developer.


                                                            

                                          Centralized Repository          local  Repository
                 dev  repository -                 only one                multiple repo
       


                                                                   
//GIT  
               - It is  a Distributed Version Control Tool
               -  Linux  -  Created by Linux Torvalds 
               -  GIT   - created by  Linux Torvalds 
               - no single point of failure since all the dev have local repository.
               - check out and commit performed locally.
               - dev work space not required to connect to network
               - staging area (it is part of developer machine)
                               -  In git  commit is 2 step process
                               -  first   we have to commit in the staging area 
                               - then from staging area to local repository
                               - staging area is a virtual area
                               - we can double check any update before commit
                               - it is not available in the other version of the VCS


                                         WS1[Files]   -------commit--->         [local repository]

                  GIT         -          WS1[Files]   ---------commit -------     [Staging Area]         --commit--->    [local repository]

                            
                  -  git will take the snap shot of the data and then store it
                  -  cryptographic conversion done in the staging area
                  -  convert our data into hashing algo and encrypted format  
                  -  encryption and decryption is automatically take care of by git
                  -  Branching and Merging


----------------------------------------------------------------------------------------------

step-1(global)

Create your GitHub Account
https://github.com
username : Amit202020
password : ********

Create GitHub  repo

name : java21

repo path : https://github.com/Amit202020/java21.git


step-2

download git 
          
https://git-scm.com/downloads  and install

	Git-2.50.1-64-bit


step-3 

go to git bash

create local repository
  /> git init <repo name>

create clone repository
  /> git clone  https://github.com/Amit202020/Html5Css3bootstrap4.git

Send file from local to global repo
  /> 


  >> git status
  >> git add .
  >> git commit -m "class free code"
  >> git push origin master










18th July 2025
What we have done last day ?
done- Venigalla, Karthik, Upender

#Project Artifact Review:
1.Software Development Life Cycle
2.Business Requirement Diagram


#Java Script
What JavaScript implementations are available?
Variable creation features
Data types
Conditional Statement
#ADM - Application Development and Maintenance
#Agile - Reporting Progress in Agile Projects 
#Advanced GIT
#Advanced Bootstrap

TechDemo:


Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,
       Upender,Teja,Raghu,Mohith,[Karthik],Prasanth,Abhinav







21th July 2025
What we have done last day ?
done- Venigalla, Karthik, Upender


#Java Script
What JavaScript implementations are available?
Variable creation features
Data types
Conditional Statement
JS Function
JS Event


#jQuery
#Java Script and jQuery
#JQuery
#jQuery Features
#JQuery Setup
#HelloWorld using jQuery
#selector - id , class , element

#Project Artifact Review:
2.Functional Requirements Specification 

#ADM - Application Development and Maintenance
#Agile - Reporting Progress in Agile Projects 
#Advanced GIT
#Advanced Bootstrap

TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,
       Upender,Teja,Raghu,Mohith,[Karthik],Prasanth,Abhinav


GIT
Bootstrap
Agile values and Principle
User Stories
BRD
DevOps

handsOn - bootstrap(15) , GIT() , BRD() , 







#Java Script
What JavaScript implementations are available?
Variable creation features
Data types
Conditional Statement
JS Function
JS Event




	HTML - markup 

	CSS - create good look and feel 

	JS/JQuery - logic inside page


//Java Script


- java script is used to define function in webpage
- task of function
            - take input , perform action and provide output 


                     int  getHello(int a , int b){

			return    a+b;

		     }
-object oriented Language

		OOP - 1 2 3 4 5 6

-developed by Netscape Corporation in 1996.



			Java       />javac  Hello.java
				   />java Hello         JVM

			

			JS         Browser 
							JS Engine


-js is used in browser.












script - lightweight programming

- scripting language and programming language 

      SL - less powerful as most of the complex logic we can not implement.
           - lines end with ; but use is optional
           - interpreter based

		hello.js  =>  => NC/MC


      PL - more powerful as most of the complex logic we can implement.
           - lines end with ; and use is mandatory.
           - compiler based.

		Hello.java =>  Hello.class => NC


        
- <head> - is the logical part of the web page.
                 - we write jS inside the <head>
- <body> - visual area of the page.


- Version	Official Name
  ES5	        ECMAScript 5 (2009)
  ES6	        ECMAScript 2015
	        ECMAScript 2016
	        ECMAScript 2017

The JavaScript naming convention started with ES1, ES2, ES3, ES5 and ES6.
But, ECMAScript 2016 and 2017 was not called ES7 and ES8.
Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).





//What JavaScript implementations are available?

The first ever JavaScript was created by Brendan Eich at Netscape, 
and has since been updated to conform to ECMA-262 Edition 5 and later versions.
This engine, code named SpiderMonkey, is implemented in C/C++. 


The Rhino engine, created primarily by Norris Boyd (also at Netscape) 
is a JavaScript implementation written in Java. 
Like SpiderMonkey, Rhino is ECMA-262 Edition 5 compliant.


ECMA-262 5.1 edition, June 2011.
ECMA-262, 6th edition, June 2015.
ECMA-262, 7th edition, June 2016.
ECMA-262, 8th edition, June 2017.
ECMA-262, 9th edition, June 2018.
ECMA-262, 10th edition, June 2019.
ECMA-262, 11th edition, June 2020

Several major runtime optimizations such as TraceMonkey (Firefox 3.5), JägerMonkey (Firefox 4)

Google's V8, which is used in the Google Chrome browser

The Chakra engine used in Internet Explorer 
(although the language it implements is formally called "JScript")














- window is class that represent browser.
- document is object that represent page.
- inside window we can have multiple object ex document


- we can write html inside java script.
- html files are like exe files.we have to use
  <script> to include Js inside html.




hello.html

<head>
<script src="myjs.js">
</script>

<script type="text/javascript" language="javascript">
  document.write("Welcome  to  JS");
<script>


- JS can be written in common area or in a block
- block is more powerful than common area.


- in realtime we use external java script.






- in scripting variable is implicit.
         - during runtime interpreter try to understand 
            what you have declared.
         - what data type it is based on the data.
- in programming language variable is explicit.
         - programmer must declare the int , float type.


//variable creation features
  - variable should start with alphabet
  - variable should not contain special character
  - variable are case sensitive.
  - variable start with var.


			int  a = 10   // java  //explicit


		        var  b = "hello" // java script //implicit



//data types
        primitive (int,float,string,boolean,undefined,null)
        non primitive datatypes(object)

<script type="text/javascript" language="javascript">
  var x = 60;

  document.write("the value is"+x+"<br/>");

  var y = 'Hello';
  document.write("the str is"+y+"<br/>");

</script>  


document.write("This is 'good' book");


 ' '  inside  " "  - allowed
 " " inside  ' '  - allowed

  '  ' inside  '  ' - not allowed
  " " inside  " " - not allowed











<noscript>
    - sometimes we are confused weather browser
      does not support JS or we have some error 
      in the JS code.
     - crome by default support Java Script
     - mozila by default support Java Script
     - IE by default support VB Script

<noscript>
  it does not support java script 
</noscript>



-conditional statement

<head>
<script type="text/javascript"/>

var x=prompt("Enter Any Number:","");

if(x>100)
{
alert("User Enterted Number is :"+x);
}
else
{
alert("User Enterted Number is"+x);
}

</script>
</head>


=====================================
<head>
<script type="text/javascript"/>
var x=prompt("Enter Any Number:","6");
if(x>100)
{
alert("User Enterted Number is :"+x);
}
else if(x<100)
{
alert("User Enterted Number is"+x);
}
else if(x==100)
{
alert("User Enterted Number is"+x);
}
else{
   alert("invalid input");
}
</script>
</head>









======================================
<head>
<script type="text/javascript"/>

var course=prompt("Enter Any Course:","JAVA");

switch(course)
{
case 'HTML5'
doument.write('Course Name is:'+course);
break;

case 'JAVA'
doument.write('Course Name is:'+course);
break;

default
document.write('selected course does not exist');
}












=======================================
-for
<head>
<script type="text/javascript">
for(i=1;i<=15;i++){
document.write("The Value is:"+i+"<br/>");
}
</script>
</head>















==========================================
-while 
       
<script language="javascript">
var i =0;
while(i < 5)
{
    document.write("number is:"+ i);
    i++;
}
</script>
==========================================
-function
      - code reusability
      - A function is a group of reusable code which can be called anywhere in your program. 
        This eliminates the need of writing the same code again and again. 
	It helps programmers in writing modular codes. 
	Functions allow a programmer to divide a big program into a number of small and 
        manageable functions.
      
Ex- function without argument
<head>
<script type="text/javascript">

function MyWarnings()
{
    alert("welcome to JS");
}

</script>
</head>
<body>
<button onclick="MyWarnings()">Click Warnings</button>
</body>








===========================================
Ex- function with argument

<head>

<script type="text/javascript">//worker
var x=30;//global var
function addition(x,y)
{
var y=40;//local var
return x*y;
}
</script>

</head>
<body>

<script language="javascript">//caller
document.write("addition is:"+ addition(60,40));
</script>


</body>











==============================================
<head>
<script type="text/javascript">
function display()
{
document.bgColor="#33daff";
}
</script>
</head>
<body>
<button onclick="display()">Click Warnings</button>
</body>

-document is related to body.as it is visual



==================================================
Hands On:
- call a add or mul method recursive way using java Script from 1 to n.

function add(number) {
  if (number <= 0) {
    return 0;
  } else {
    return number + add(number - 1);
  }
}

document.write(add(4)); 

==================================================
Event-
What is an Event ?
JavaScript's interaction with HTML is handled through events that occur when the user or the browser
manipulates a page.
When the page loads, it is called an event. When the user clicks a button, that click too is an event. 
Other examples include events like pressing any key, closing a window, resizing a window, etc.


click - happened when user click link or form.
focus - happened when input focus is given to input element.
onload - happened when an object has been loaded.
mouseover - happened when the user moves the mouse pointer.
mouseout - happened when the user moves the pointer off.
select - happened when the user select form element.
submit - when the form is submitted
unload - happened when the user unload the page.


Ex-1
<head>
<script type="text/javascript">
function display()
{
alert("Welcome To Events")
}
</script>
</head>
<body>
<button onclick="display()">Click Warnings</button>
</body>



Ex-2
<head>
<script type="text/javascript">
function display()
{
    document.getElementById("dd").innerHTML=Date()
}
</script>
</head>
<body>
<p id="dd">Click the button to display date</p>
<button onclick="display()">Click Here</button>
</body>


Ex-3
<head>
<script type="text/javascript">
function pageload()
{
alert("page loaded successfully")
}
</script>
</head>
<body onload="pageload()">
<h1> refresh the page to check it</h1>
</body>

Ex-4
<head>
<script type="text/javascript">
function imageload()
{
alert("image loaded successfully")
}
</script>
</head>
<body>
<p> once image loaded , message will be displayed</p>
<img src="myimage.jpg" width="200px" height="200px" onload="imageload()"/>
</body>

- onload will execute only when the particular element loaded.



//Big Arrow (Fat Arrow) Functions==Lambda Expression
Before this new standard, JavaScript used the function keyword to create functions. 
Now, we can use the big arrow, =>, to write functions.

/pre ES-6
function add(num1, num2) {
 return num1 + num2;
}


function add(num1, num2) {
 return num1 + num2;
}

function (num1, num2) {
 return num1 + num2;
}

(num1, num2) {
 return num1 + num2;
}

(num1, num2) => num1 + num2;



function mul(num1, num2) {
 return num1 * num2;
}


(num1, num2) => num1 * num2;



 
/ES6 (implicit return)
const addImplicit = (num1, num2) => num1 + num2;
 
console.log(add(3, 4));
console.log(addImplicit(3, 4));


















#jQuery
#Java Script and jQuery
#JQuery
#jQuery Features
#JQuery Setup
#HelloWorld using jQuery
#selector - id , class , element



#JQuery
- it is a java script library.
- it will make java script programming easy.
- created in 2006.


#jQuery Features
Selector - it will help to select an html element and manipulate it.
Animate - 
CSS manipulation - 
Ajax Method - jQuery have rich set of Ajax method for developing modern web application.
Event method - jQuery have built-in event method.
jQuery Traversing - jQuery provide DOM traversal method to locate descendants elements.
Plugins - jQuery have many plugins such as create split pages, create slide show , create 
          your own custom plugins.



#JQuery Setup
1. download and setup
2. CDN for jQuery.


#HelloWorld using jQuery


<!DOCTYPE html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function(){
              document.write("Hello world using jQuery");
        });
    </script>

</head>
<body>
    <h1> Hello</h1>
</body>
</html>



#selector - id , class , element
- $() 
- element inside a parenthesis is element selector.
- id inside a parenthesis is id selector.
- class inside a parenthesis is class selector.



$("h1")  - selector - element
<h1> Welcome To jQuery </h1>


$("pp")  - selector - id
<h1 id="pp"> Welcome To jQuery </h1>


$("dd")  - selector - class
<h1 class="dd"> Welcome To jQuery </h1>










//element selector
<!DOCTYPE html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function(){

              $("button").click(function(){
                $("div").hide();
              });
        });
    </script>
</head>
<body>
    <div>
        <p>Welcome To User Interface manipulation using jQuery</p>
    </div>
    <button>Click Me</button>
</body>
</html>






#hide an html element
<!DOCTYPE html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function(){

              $("h1").click(function(){
                $(this).hide();
              });
        });
    </script>

</head>
<body>
    <h1>Welcome To Fusion Middleware</h1>
</body>
</html>


//id selector
<!DOCTYPE html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function(){

              $("button").click(function(){
                $("#ui").hide();
              });
        });
    </script>

</head>
<body>
    <div id="ui">
        <p>Welcome To User Interface manipulation using jQuery</p>
    </div>
    <button>Click Me</button>
</body>
</html>




//class selector
<!DOCTYPE html>
<head>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function(){

              $("button").click(function(){
                $(".ui").hide();
              });
        });
    </script>

</head>
<body>
    <div class="ui">
        <p>Welcome To User Interface manipulation using jQuery</p>
    </div>
    <button>Click Me</button>
</body>
</html>





22nd July 2025
What we have done last day ?
done- Venigalla,Karthik,Upender,[Raghav],Abhishek,Murtaza,


UI Side Update
html5->css3->javascript->jQuery->bootstrap-> Angular -> React -> ...

MiddleTier Update
WebApplication(j2ee-servlet/jsp) 
   Application Component-> WebService(soap/rest) ->   microservice  
   (ifra)-> web server -> application server -> cloud   
   (framework)-> Spring -> SpringBoot 


#Project Artifact Review:


#ADM - Application Development and Maintenance
#Agile - Reporting Progress in Agile Projects 
#Advanced GIT
#Advanced Bootstrap

TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,
       Upender,Teja,Raghu,Mohith,[Karthik],Prasanth,Abhinav


GIT
Bootstrap
Agile values and Principle
User Stories
JavaScript
JQuery

handsOn - bootstrap(15) , GIT() , BRD() , 




#ADM


1. Need for Maintenance:

Correcting Defects: Fixing bugs or issues discovered after software deployment.

Adapting to Environment Changes: Modifying software to work with new operating systems, databases, browsers, or hardware.

Enhancing Performance: Improving efficiency, response time, or optimizing resource usage.

Adding New Features: Extending the software’s functionality based on evolving business needs.

Ensuring Security: Updating software to protect against emerging security threats.

Legal/Regulatory Compliance: Modifying software to comply with new regulations or standards.



2. Challenges in Software Maintenance

Understanding Legacy Code: Original developers may not be available, and documentation may be outdated.

High Complexity: Interdependencies between modules can make changes risky.

Limited Documentation: Incomplete or outdated documentation increases maintenance difficulty.

Regression Risks: Fixing one issue can unintentionally introduce others.

Resource Constraints: Limited budgets, skilled personnel, or tools for maintenance.

Change Management: Ensuring version control and proper tracking of all changes.


3. Categories of Software Maintenance

Category	Description
Corrective	Fixing defects or errors reported by users post-deployment.
Adaptive	Modifying software to adapt to changes in environment.
Perfective	Enhancing functionalities or performance based on user feedback.
Preventive	Making changes to improve future maintainability and prevent potential problems.







Reporting Progress in Agile Projects typically focuses on transparency, collaboration,
 and value delivery over rigid documentation. Instead of traditional progress reports, Agile uses lightweight, iterative techniques. Here's an overview of how progress is reported in Agile projects:


1. Daily Stand-ups (Daily Scrum)
Frequency: Dail
Purpose: Quick updates by each team member:
What was done yesterday?
What will be done today?
Any blockers or impediments?

2. Sprint Reviews
Frequency: At the end of each sprint
Purpose: Demonstrate completed work (potentially shippable product increment) to stakeholders for feedback.
Outcome: Agreement on what’s complete, discussion on next priorities.

3. Burndown Charts / Burnup Charts
Burndown: Tracks remaining work over time.
Burnup: Shows completed work towards total scope.
Benefit: Visual, simple way to track sprint or release progress.

4. Velocity Tracking
Measures the amount of work (usually in story points) completed per sprint.
Helps forecast future sprint capacity and release planning.

5. Cumulative Flow Diagrams
Visualizes the flow of work through stages (To Do, In Progress, Done).
Identifies bottlenecks or work pile-ups.

6. Sprint Goals Achievement
Progress reported against pre-defined sprint goals, not just task completion.

7. Product Backlog Refinement
Continuous visibility of prioritized items.
Reporting can focus on how backlog is evolving based on customer feedback and team capacity.


8. Team Demos
Short demos after completing significant features or increments, outside of formal sprint reviews.


9. Agile Project Dashboards (Tool-Based Reporting)
Tools like Jira, Azure DevOps, Rally, or Trello provide real-time dashboards.
Common metrics:
Number of stories completed
Remaining backlog items
Sprint progress
Team capacity/utilization





#WebApplication using Servlet/jsp  (J2EE)


- 3 tier architecture

- web server and application server

- web component  and Application component

     Web Component - simple web application using (servlet and jsp )
                   

     Application component - Enterprise level Application (springbc,adfbc,ejb)
                                 - distributed
                                 - persistence
                                 - webservice
                                 - transaction
                                 - multi threading
                                 - location transparency

     Enterprise level Application - cloud - (springbc,adfbc,ejb)




-  Application Server  = >    Cloud  



#cloud

#introduction:
today  every one leverage this cloud computing.
regardless of job role , industry need employees to do cloud computing.


#what is cloud computing ?
- to run car we need electricity , gas
- to run a web application we need server to run.
- to run our home we need power.
- we don't create power grid ? we connect our home , car with the power grid and consume the power from the grid.  then we pay the bill at the end of the month.


- How servers are related to cloud computing ?
- same like power company , gcp , aws , azure they supply the resource , server  to the IT company.
- we connect the internet to setup the servers and it resources. 


- Cloud computing is the delivery of different services through the Internet, including data storage, servers, databases, networking, and software
- cloud computing will give you compute resources based on the demand that you have.
- based on the use of those cloud computing resources you are liable to pay the bill to the cloud provider.




#Evaluation of cloud computing 
- any org main their infostructure , they maintain the hardware , 
above hardware they install os , and above os they  run the application.
 like this way they main 3 diff server pro production , dev and testing.


limitation  - as the applications are growing , as the need of the customer growing , they need 
                  more servers and hardware infostructure.



- this problem solved by Virtualization.  
same hardware but they can create multiple VM above it using  Virtualization.
- each virtual machine can be used as Dev , Prod or testing env or database instance etc.
limitation - they have to maintain their own hardware , 24hr power supply , if more traffic they have to increase the hardware.


- to resolve the problems cloud computing come into picture.
- initially organization provide db server , as server as the resource provider.
- like this way it company buy the server , db , storage from the cloud provider. when company don't need the same 
  they simply delete the server or db or storage.
- initially cloud provider supply very minimul services like linux server or windows server or db.


- today cloud provider providing lots of services
   like  - unlimited storage , compute , analytics , iot , ml etc
- it company today can use these products just plugins and play. any where , any time and of any size.




 servlet/jsp ->(framework)Spring,struts,jsf,adf,oaf -> SpringBoot
                          

- web application using servlet

     client => login.html  =>  loginServlet.java  =>  DB 

-  web application using jsp

     client => login.html  =>  login.jsp  =>  DB 

-  web application using  jsp + MVC(4)

     client => login.html  =>  loginController.jsp  =>  LoginModel.java   =>  DB 
                 v                  c                       m

-   web application using  jsp + MVC + Enterprise Application  (with application server)

      client => login.html  =>  loginController.jsp  =>  LoginModel.java(EJB/ADFBC)   =>  DB 
                 v                  c                       m


-   web application using  jsp + MVC + Enterprise Application  (no application server)

      client => login.html  =>  loginController.jsp  =>  LoginModel.java(SpringBC)   =>  DB 
                 v                  c                       m


-   web application using  jsp + MVC + Enterprise Application  (no application server/production grade project)

      client => login.html  =>  loginController.jsp  =>  LoginModel.java(SpringBoot)   =>  DB 
                 v                  c                       m

  Application Component   -> WebService(soap/rest) ->   microservice

(ejb,adfbc,bc4j,springbc)
 1 2 3 4 5 6 

- Distributed Environment Communication 
   - remotely call some function
   - calling function from one JVM to another JVM

       
               server1                         server2
                 EJB                            SpringBC
		JVM                              JVM

- implementing  Distributed Environment Communication  - RMI , CORBA , Web Service



#WebService
                           //3 Tire - Web Application Architecture  
				     -  client , middle , eis   

		          // Web Component and Application Component
				    -  web component - simple web application
				    -  application component - enterprise level application


                           // distributed -   It is  a features of Enterprise Level Application
				-  remotely call some function                                                                            


                          //Distributed Environment Communication :

	                                  RMI  -    Remote  Method Invocation 
			      -    support homogeneous communication

				                    RMI
			[Server1]        <==============>    [Server2]
                                                              JAVA                    homo                       JAVA


			                        RMI does not support
			[Server1]        <==============>    [Server2]
                                                              JAVA                    hetero                     .Net






                        CORBA   -   Common Object Request Brocker Architecture
                                -   support homogeneous and Heterogeneous  communication
                                -   high complex 
                                -   implementation cost is high






                                                              JAVA IDL                           JAVA IDL
                                                               jobj            CORBA               jobj 
			                                    [Server1]        <==============>    [Server2]
                                                              JAVA              homo                JAVA



                                                                        JAVA IDL                           .Net  IDL
			                                                    jobj             CORBA         dobj
			                                              [Server1]        <==============>    [Server2]
                                                                        JAVA                 hetero         .Net


                       Web Service  -   We implement distributed env communication using web service.
				    -   support homogeneous and Heterogeneous  communication
				    -   multiple machine or server will communication using web service.
				    -   we can implement vendor independent communication


			         => xml/json		              <=   xml/json				
                          jobj                                  Web service     jobj 
			[Server1]        <================================>    [Server2]
                                                              JAVA    



                                              homo-                       JAVA


                                 => xml/json                                <= xml/json
			        jobj       Web Service                       dobj
			[Server1]        <===============================>    [Server2]
                          JAVA                     hetero-                     .Net


Web Service Communication:

	  Source       API             Destination
          Server1                      serve2


Types Of Web Service: SOAP(XML) and REST(JSON)


REST  API :  Fake API







23rd July 2025
What we have done last day ?
done- Venigalla,Karthik,Upender,[Raghav],Abhishek,Murtaza,


#Project Artifact Review:
E-com App- cloud native application

#Advanced JS
	JS  Global Function
	Error in JS
	JS Object
	JS Array Object
	Object and Array Object
	How JavaScript has changed over the years ?
	Case Study

#Advanced GIT
#Advanced JQuery
#Advanced Bootstrap
#ADM - Application Development and Maintenance
#Agile - Reporting Progress in Agile Projects 
#Unix

TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,
       Upender,Teja,Raghu,Mohith,[Karthik],Prasanth,Abhinav


GIT
Bootstrap
Agile values and Principle
User Stories
JavaScript
JQuery

HandsOn - bootstrap(6) , GIT(6) 








JS  Global Function
- pre predefined function
- define in any level

ie  eval()


Ex-1
<head>
<script type="text/javascript">
var  a = prompt("Enter any number","");
alert(eval(x));
alert("execution done")
</script>
</head>
<body>
</body>


Ex-2

<head>
<script type="text/javascript">
document.write(isFinite(105))
</script>
</head>
<body>
</body>

Ex-3
<head>
<script type="text/javascript">
document.write(isNaN(105))
</script>
</head>
<body>
</body>

Ex-4
<head>
<script type="text/javascript">
var  x = "400";
var y = 500;
var z = parseInt(x)+y;
document.write("sum="+z)

</script>
</head>
<body>
</body>
================================================    


//Error in JS


                try{

		var x= 200;
		document.writ("x="+x);

		}catch()


























The try statement lets you test a block of code for errors.
The catch statement lets you handle the error.
The throw statement lets you create custom errors.
The finally statement lets you execute code, after try and catch, regardless of the result.


1. Syntax error - parsing  occur during compilation
                             - total statement
2. Runtime error - exception occur during runtime
                                - part of the statement


ex-1
<head>
<script type="text/javascript">

document.write("Welcome')  //syntax error
document.wri("Welcome") //runtime error

</script>
</head>
<body>
</body>









The Error Object
JavaScript has a built in error object that provides error information when an error occurs.
The error object provides two useful properties: name and message.

finally- two different case

	        some of the statement we can write inside a try block but it is possible
		that JS Engine may avoid the execution of those line of code.

		case-1   we have written statement where the previous line throw error then
                         this line can never be executed.
		case-2   it is possible that JS Engine may avoid the execution of non-js object.
  
                       
			  
ex-2
<head>
<script type="text/javascript">
try{
      alert("welcome To JS");
      ale("welcome to Exception");
      alert("finally block");
}catch(e)
{
       alert(e.description)
       alert(e.message)
       alert(e.name)
}
finally{
       alert("finally block")
}

</script>
</head>
<body>

Six different values can be returned by the error name property:

Error Name	Description
EvalError	An error has occurred in the eval() function
RangeError	A number "out of range" has occurred
ReferenceError	An illegal reference has occurred
SyntaxError	A syntax error has occurred
TypeError	A type error has occurred
URIError	An error in encodeURI() has occurred



Range Error
A RangeError is thrown if you use a number that is outside the range of legal values.
For example: You cannot set the number of significant digits of a number to 500.

var num = 1;
try {
  num.toPrecision();  
}
catch(err) {
  document.write(err.name);
}




Reference Error
A ReferenceError is thrown if you use (reference) a variable that has not been declared:

var x = 5;
try {
  x = y + 1;   // y cannot be used (referenced)
}
catch(err) {
  document.write(err.name);
}


Syntax Error
A SyntaxError is thrown if you try to evaluate code with a syntax error.

try {
  eval("alert('Hello)"); 
}
catch(err) {
  document.write(err.name);
}


Type Error
A TypeError is thrown if you use a value that is outside the range of expected types:

var num = 1;
try {
  num.toUpperCase();   // You cannot convert a number to upper case
}
catch(err) {
  document.write(err.name);
}




URI (Uniform Resource Identifier) Error
A URIError is thrown if you use illegal characters in a URI function:
try {
  decodeURI("%%%");   // You cannot URI decode percent signs
}
catch(err) {
  document.write(err.name);
}


=================================================

//throw - It is used to throw User defined Error.


Registration: 

	id   :  [    ]
 
	name  :  [     ]

	age   :  [     ]   age < 25 



The throw statement throws a user-defined exception. Execution of the current function will stop

function getRectArea(width, height) {
  if (isNaN(width) || isNaN(height)) {
    throw 'Parameter is not a number!';
  }
}

try {
  getRectArea(3, 'A');
} catch (e) {
   document.write(e)
  // expected output: "Parameter is not a number!"
}





======================================================
//user defined exception
-creates an object of type UserException and uses it in a throw statement.

function UserException(message) {
  this.message = message;
  this.name = 'UserException';
}

function getMonthName(age) {
  if (age > 25) {
    throw new UserException('InvalidAgeNo');
  }
}

try {
  getMonthName(12)
} catch (e) {
  document.write(e.message, e.name); // pass exception object to err handler
}


=======================================================
Hands On:
Using an error constructor to create an error object, these error objects throw 
an exception when an error occurs during program execution.

<!DOCTYPE html>
<html lang="en">
<head>
<title>Throw Statement with Error constructor</title>
</head>
<body>
<script>
var x = 15, y = 10;
try {
if(x == y)
throw new Error("Both are same value!");
else
throw new Error("Both are different!");
} catch(e) {
document.write(e.message);
}
</script>
</body>
</html>


=======================================================
Object - 
        JavaScript is an Object Oriented Programming (OOP) language. 
        A programming language can be called object-oriented if it provides four basic capabilities to developers −

       Encapsulation − the capability to store related information, whether data or methods, together in an object.
       Aggregation − the capability to store one object inside another object.
       Inheritance − the capability of a class to rely upon another class (or number of classes) for some of its 
       properties and methods.
       Polymorphism − the capability to write one function or method that works in a variety of different ways.

        -JS is object oriented programming.

        -JS Object
                 Array,Boolean,Date,Math,String,Number,RegExp
        -Browser Object
                  Window , Navigator,Screen,History,Location
        -User Defined Object


==========================================================
Array Object:
-An array can hold many values under a single name, and you can access the values by referring to an index number.
-Spaces and line breaks are not important. A declaration can span multiple lines:
         

	  var  arr=['a', 'b', 'c', 'd']; 

-You can also create an array, and then provide the elements:
                   cars = [];

	           cars[0]= "Saab";
                   cars[1]= "Volvo";
                   cars[2]= "BMW";

- 3 different approach to create array in JS

   1.literals
   2.regular
   3.condensed

ex-1
<head>
<script type="text/javascript">

var  arr=['a','b','c','d'];   //literal
document.write(arr.length)


ex-2
<p id="demo"></p>
<script>

var cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;

document.write(cars.length)
document.write(cars[0])
cars.push("ford")
document.write("<br>")
document.write(cars)
cars[8]="xyz"
document.write("<br>")
document.write(cars) 

var  cc =cars.pop()
document.write(cc)

document.write("<hr>")
--For simplicity, readability and execution speed, use the array literal method.



var  arr1= new Array(); //regular
arr1[0]="a"
arr1[1]="b"
arr1[2]="c"
arr1[3]="d"
arr1[4]="f"
document.write(arr1.length)
-JavaScript has a built in array constructor new Array().



var  arr2= new Array('a','b','c','d');//condensed
document.write(arr1.length)




//The Difference Between Arrays and Objects
-In JavaScript, arrays use numbered indexes. 
 
Many programming languages support arrays with named indexes.
Arrays with named indexes are called associative arrays (or hashes).
JavaScript does not support arrays with named indexes.
In JavaScript, arrays always use numbered indexes.  

var person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
document.write(person.length);     
document.write(person[0]);


In JavaScript, objects use named indexes.

//var emp2 = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
//document.write("Emp first name is : " + emp2.firstName + "<br>");
//document.write("Emp last name is : " + emp2.lastName + "<br>");










======================================================
//Date Object
      - new Date() creates a new date object with the current date and time:
      - Date objects are static. The computer time is ticking, but date objects are not.

var d = new Date();
document.write(d)

      - new Date(year, month, ...) creates a new date object with a specified date and time.
      -7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):

d = new Date(2018, 11, 24, 10, 33, 30, 0);
document.write(d)

        - JavaScript Stores Dates as Milliseconds
        - JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC 

var d = new Date(7000000000000);
document.write(d)

         -Date Methods
          When a Date object is created, a number of methods allow you to operate on it.
          Date methods allow you to get and set the year, month, day, hour, minute, second, and millisecond 
          of date objects, using either local time or UTC
         - The toDateString() method converts a date to a date string:

var d = new Date();
document(d.toDateString());



====================================================
//number object
-JavaScript has only one type of number. Numbers can be written with or without decimals.
-JavaScript Numbers are Always 64-bit Floating Point
  Unlike many other programming languages, JavaScript does not define different types of 
   numbers, like integers, short, long, floating-point etc.
-JavaScript numbers are always stored as double precision floating point numbers, following
   the international IEEE 754 standard.

var x = 10;
var y = 20;
var z = x + y;

var x = 123e5;    // 12300000
var y = 123e-5;   // 0.00123

======================================================
//JS Boolean
-A JavaScript Boolean represents one of two values: true or false.

The Boolean() Function
You can use the Boolean() function to find out if an expression (or a variable) is true:

document.write(Boolean(10 > 9))
document.write(10 > 9)


//JS Math
The Math Object
Unlike other objects, the Math object has no constructor.

The Math object is static.
All methods and properties can be used without creating a Math object first.


document.write(Math.E)        // returns Euler's number
document.write("<br>")
document.write(Math.PI)       // returns PI
document.write("<br>")
document.write(Math.SQRT2)    // returns the square root of 2
document.write("<br>")
document.write(Math.SQRT1_2) // returns the square root of 1/2


Math.round(x) returns the nearest integer:  
Math.round(4.6);

Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:
document.write(Math.ceil(4.1))       

Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:
document.write(Math.floor(4.1))  

Math.trunc()
Math.trunc(x) returns the integer part of x:

document.write(Math.trunc(4.7)) 
document.write(Math.trunc(4.4))      

Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Math.sqrt()
Math.sqrt(x) returns the square root of x:

//js string

A JavaScript string is zero or more characters written inside quotes.
You can use single or double quotes:

let carName1 = "Volvo XC60";  // Double quotes
let carName2 = 'Volvo XC60';  // Single quotes


You can use quotes inside a string, as long as they don't match the quotes surrounding the string:
let answer1 = "It's alright";
let answer2 = "He is called 'Johnny'";
let answer3 = 'He is called "Johnny"';


String Length
To find the length of a string, use the built-in length property:
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;


The sequence \"  inserts a double quote in a string:
let text = "We are the so-called \"Vikings\" from the north.";


JavaScript Strings as Objects
Normally, JavaScript strings are primitive values, created from literals:
let x = "John";


But strings can also be defined as objects with the keyword new:
let y = new String("John");

The new keyword complicates the code and slows down execution speed.
String objects can produce unexpected results

=======================================================
//The Window Object

The window object is supported by all browsers. It represents the browser's window.
All global JavaScript objects, functions, and variables automatically become members of the window object.
Global variables are properties of the window object.
Global functions are methods of the window object.
Even the document object (of the HTML DOM) is a property of the window object:

window.document.write("hello")


//JavaScript Window Screen
The window.screen object contains information about the user's screen.

screen.width
screen.height
screen.availWidth
screen.availHeight
screen.colorDepth
screen.pixelDepth


The screen.width property returns the width of the visitor's screen in pixels.


//JavaScript Window Location

The window.location object can be used to get the current page address 

window.location.href returns the href (URL) of the current page
window.location.hostname returns the domain name of the web host
window.location.pathname returns the path and filename of the current page
window.location.protocol returns the web protocol used (http: or https:)
window.location.assign() loads a new document


window.document.write(window.location.href)

//JavaScript Window Navigator
The window.navigator object contains information about the visitor's browser.






























24th July 2025
What we have done last day ?
done- Venigalla,Karthik,Upender,[Raghav],Abhishek,Murtaza,


#Advanced JS
	How JavaScript has changed over the years ?
	Case Study

#Project Artifact Review:
DDD
Architectural Design

#ADM - Application Development and Maintenance
#Agile - Reporting Progress in Agile Projects

#Advanced GIT
#Advanced JQuery
#Advanced Bootstrap
 
#Unix

TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,
       Upender,Teja,Raghu,Mohith,[Karthik],Prasanth,Abhinav

GIT
Bootstrap
Agile values and Principle
User Stories
JavaScript
JQuery

HandsOn - bootstrap(6) , GIT(6) 




======================================================
 //User Defined Object

With JavaScript, you can define and create your own objects.
There are different ways to create new objects:
      
      -Create a single object, with the keyword new.
      -Define an object constructor, and then create objects of the constructed type.
      -Create a single object, using an object literal.
      

- All user-defined objects and built-in objects are descendants of an object called Object.
var employee = new Object();

- A constructor is a function that creates and initializes an object. JavaScript provides a special 
constructor function called Object() to build the object. The return value of the Object() constructor
 is assigned to a variable.

- Create a single object, using an object literal.
   Using an object literal, you both define and create an object in one statement.
   An object literal is a list of name:value pairs (like age:50) inside curly braces {}.

Ex-1   5 min(9.45-10.00)
<html>
   <head>
      <title>User-defined objects</title>     
      <script type = "text/javascript">
         var book = new Object();   // Create the object
         book.name = "MS";     // Assign properties to the object
         book.author  = "Martin";
      </script>      
   </head>   
   <body>  
      <script type = "text/javascript">
         document.write("Book name is : " + book.name + "<br>");
         document.write("Book author is : " + book.author + "<br>");
      </script>   
   </body>
</html>

Ex-2 5 min (10.52-10.57)
<html>
   <head>
   <title>User-defined objects</title>
      <script type = "text/javascript">

          function addPrice(amount) {
            this.price = amount;
         }
         function book(title, author) {
            this.title = title;
            this.author  = author;
            this.addPrice = addPrice;
         }
      </script>
   </head>
   <body>
      <script type = "text/javascript">
         var myBook = new book("MS", "Martin");
         myBook.addPrice(200)
         document.write("Book title is : " + myBook.title + "<br>");
         document.write("Book author is : " + myBook.author + "<br>");
         document.write("Book price is : " + myBook.price + "<br>");
      </script>
   </body>
</html>







=====================================================
HandsOn: 15 (10 min)
     - create an employee object  using Object() , and print all the instance variable.
     - create an employee object using constructor and print all the instance variable.



























<html>
<head>
<script type="text/javascript" language="javascript">
//var emp = new Object();   
//emp.empId = "e001";     
//emp.empName  = "Srini";

//function emp(empId , empName){
	//this.empId = empId
	//this.empName = empName

//}
//var emp1 = new emp("e002","navin")

//const emp2 = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

</script>
</head>
<body>
<script language="javascript">

//document.write("Emp Id is : " + emp.empId + "<br>");
//document.write("Emp name is : " + emp.empName + "<br>");

//document.write("Emp Id is : " + emp1.empId + "<br>");
//document.write("Emp name is : " + emp1.empName + "<br>");

//document.write("Emp first name is : " + emp2.firstName + "<br>");
//document.write("Emp last name is : " + emp2.lastName + "<br>");

</script>
</body>
</html>
=====================================================
//How JavaScript has changed over the years ?



JavaScript beginnings

The first iteration of JavaScript was actually not called JavaScript at all. 
It was called Mocha. This language was created to be a higher-level language for 
designers and non-programmers alike.

When Mocha was shipped with Netscape Navigator 2.0, its production name became LiveScript, 
and then in later versions, JavaScript.

Netscape was certainly ahead of the game with their collaboration 
with Sun Microsystems in creating JavaScript. As Netscape gained more and more 
of the browser share, other browsers needed to come up with something 
to keep up with Netscape’s success.

JavaScript was invented by Brendan Eich, and in 1997 and became an ECMA standard.

Microsoft created their own version of JavaScript, called JScript. 
The main mission of these “dialects” was to increase the user experience 
and user interaction of web sites.
with the creation of JScript, Microsoft’s Internet Explorer was increasing their browser share.

ES3            ECMAScript 3(1999)
ES5	ECMAScript 5 (2009)
ES6	ECMAScript 2015
	ECMAScript 2016
	ECMAScript 2017

The JavaScript naming convention started with ES1, ES2, ES3, ES5 and ES6.
But, ECMAScript 2016 and 2017 was not called ES7 and ES8.
Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).





#ES3

Strict Equality: Beginning with ES3, the strict equality operator ( === ) became an option to
 use in addition to the equality operator ( == ).
Difference between “ == “ and “ === “ operators.
“==” is used to compare values whereas, “ === “ is used to compare  types.
       

var x = 2;
var y = "2";
document.write(x == y)  // Returns true since the value of both x and y is the same
document.write(x === y) // Returns false since the typeof x is "number" and typeof y is "string"



Regular Expressions: Two types of regular expressions became available in ES3: literal and constructor.

Literal Expressions: Literal regular expressions are expressed in between two backslashes.

var str = "This is a Good book";
var patt = /good/i;      # i means case insensitive matching
var result = str.match(patt);
document.write(result)

Constructor Expressions: Constructor regular expressions are those expressions that are created as an 
instance of the RegExp object.

var str = "Hello Studytonight";
var regex = new RegExp('hello');
document.write(regex.test(str)); 


Switch Statement:


Try/Catch Handling:











#ES4   never released due to internal conflict


#ES5 

“use strict”
Prior to ES5, undeclared variables  were allowed to be used. 
When the “use strict” feature is turned on, a reference error is thrown.
Use  ctrl+shift+j   to check error

"use strict"
x = 5
document.write(x)



forEach()
A method that is very similar to a for loop. For every element found in the array, 
the forEach() method executes a callback function on it.

var arr = [6, 4, 5, 6, 7, 7];
 
arr.forEach(function(element) {
 console.log(element * 2);
})






indexOf() and lastIndexOf()
If you need to search for a particular element in an array, you can do 
that with indexOf() and lastIndexOf(). indexOf() returns the first index 
of the search parameter if it’s found, otherwise it returns a -1.

In lastIndexOf(), it gives us the last index of the search element 
in the array. Again, if not found, it’ll return -1.

console.log(arr.indexOf(4)); // 1
console.log(arr.indexOf(2)); // -1
console.log(arr.indexOf(7)); // 4


isArray()
This method checks to see if the object passed to it is an array or not. Returns a boolean.

var str = "Hello All";
console.log(Array.isArray(arr));
console.log(Array.isArray(str));

map() , some()...........


JSON
The ability to parse and stringify JavaScript Object Notation (JSON) 
became a possibility in the ES5 standard. The JSON format is used 
to basically transmit some sort of structured data over a network 
connection, usually a web application and an API.

When we transmit the data from one application, it has to be in the 
form of a string. We use JSON.stringify() to transform JavaScript objects into strings.

We then use JSON.parse() on the other side, to transform the data 
after transmission back to a JavaScript object so we can use it.


var obj = {
 author: "Goven King",
 title: "How hibernate work",
 published: true
}
 
console.log("======== OBJ EXAMPLE ==========");
console.log("orig obj=====>", obj);
console.log("stringified obj=====>", JSON.stringify(obj));
console.log("proof of type=====>", typeof JSON.stringify(obj));
console.log("parsed string=====>", JSON.parse(JSON.stringify(obj)));
console.log("proof of type=====>", typeof JSON.parse(JSON.stringify(obj)), "\n\n");







========================================================

//New Date Methods
There were two new Date object methods that were introduced in ES5
 that are functionally equivalent. They both return the current time in
 milliseconds since January 1, 1970. 
They are Date.now() and new Date().valueOf().

<script type="text/javascript">
             console.log(Date.now());
             console.log(new Date().valueOf());
</script>


//accessors
accessor properties are methods that get or set the value of an object.
For that, we use these two keywords:
get - to define a getter method to get the property value
set - to define a setter method to set the property value

<script type="text/javascript">		
const student = {
    firstName: 'Paromita',
    get name() {
        return this.firstName;
    },
	set name(str){
		this.firstName=str;
	}
};

console.log(student.firstName); 
console.log(student.name);
student.name = 'dola'
console.log(student.firstName); 
console.log(student.name);
</script>
-------------------------------------------------------------------------
 # ES 6 


//Big Arrow (Fat Arrow) Functions = Lambda Expression
Before this new standard, JavaScript used the function keyword to create functions. 
Now, we can use the big arrow, =>, to write functions.

/pre ES-6
function add(num1, num2) {
 return num1 + num2;
}
 
/ES6 (implicit return)
const addImplicit = (num1, num2) => num1 + num2;
 
console.log(add(3, 4));
console.log(addImplicit(3, 4));







//classical inheritance

ECMAScript 2015, also known as ES6, introduced JavaScript Classes.
JavaScript Classes are templates for JavaScript Objects.

The Constructor Method
The constructor method is a special method:

It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties
If you do not define a constructor method, JavaScript will add an empty constructor method.




A class created with a class inheritance inherits all the methods from another class:

class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return 'I have a ' + this.carname;
  }
}

class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  show() {
    return this.present() + ', it is a ' + this.model;
  }
}



let myCar = new Model("Ford", "Mustang");
document.write(myCar.show())




//JavaScript Static Methods
Static class methods are defined on the class itself.
You cannot call a static method on an object, only on an object class.

class Car {
  constructor(name) {
    this.name = name;
  }
  static hello() {
    return "Hello!!";
  }
}

let myCar = new Car("Ford");
document.getElementById("demo").innerHTML = Car.hello();














//let and const



  var a = "Hello"
  a = "Demo"


  let  a = 20;
  let  a = 40;



























Prior to ES2015(ES6), JavaScript supported only function level scoping unlike other languages like C++/Java 
which has block level scoping. 
With ES2015(ES6), in addition to function level scoping, JavaScript also supports block level scoping 
with the help of “let” and “const” keywords.

var keyword where you could redeclare variables with another value.
 This proved problematic when we had the same variable name with different values
 that produced unintended bugs.

// pre-ES6: 
var x = 5;
var x = 120; //produces no errors
console.log(x)

The let keyword can be reassigned as needed. When used in the same scope, 
a redeclaration of the same variable will throw a syntax error

// ES6: 
let x = 5;
//let x = 120; // produces a syntax error in redeclare
x=400          // produces no error in reassign
console.log(x)


The const keyword is useful when you have a variable that you have no intention of reassigning. 
It will throw an error if you try to reassign your const variable to another value.

// ES6: 
const x = 5;
x=400          // produces error in reassign
console.log(x)

------------------------------------------------------------------
keyword	        const           let              var
global scope	no	        no	         yes
function scope	yes	        yes	         yes
block scope	yes	        yes	          no
-----------------------------------------------------------------

ex-1
var variable1 = 23;
let variable2 = 89;
function catchValues(){
  console.log(variable1);
  console.log(variable2);

// Both the variables can be accessed anywhere since they are declared in the global scope
}
window.variable1; // Returns the value 23
window.variable2; // Returns undefined

- Variables that are declared with the var keyword in the global scope are added to the window/global object.
- the variables declared with the let keyword are not added to the global object, 
  therefore, trying to access such variables using window.variableName results in an error.

ex-2

{
  var variable3 = [1, 2, 3, 4];
}
console.log(variable3); // Outputs [1,2,3,4]

{
  let variable4 = [6, 55, -1, 2];
}
console.log(variable4); // Throws error

- Variables declared with var keyword do not have block scope
- Variables declared with let keyword inside the block scope cannot be accessed from outside of the block.





     //Java 


// Rest parameter ( … )(collect inside array)

It provides an improved way of handling parameters of a function.
Using the rest parameter syntax, we can create functions that can take a variable number of arguments.
Any number of arguments will be converted into an array using the rest parameter.
It also helps in extracting all or some parts of the arguments.
Rest parameter can be used by applying three dots (...) before the parameters.
Rest parameter should always be used at the last parameter of a function


function extractingArgs(...args){
  return args[1];
}

document.write(extractingArgs(6, 5, 7, 99));













//Spread operator (…)(iteration)
Although the syntax of spread operator is exactly the same as the rest parameter,
 spread operator is used to spread an array, and object literals


function addFourNumbers(num1,num2,num3,num4){
  return num1 + num2 + num3 + num4;
}

let fourNumbers = [5, 6, 7, 8];
document.write(addFourNumbers(...fourNumbers)); 














/*let array1 = [3, 4, 5, 6];
let clonedArray1 = [...array1];

console.log(clonedArray1); */






let obj1 = {x:'Hello', y:'Bye'};

let obj2 = {z:'Yes', a:'No'};
let mergedObj = {...obj1, ...obj2}; // Spreads both the objects and merges it
console.log(mergedObj);



//template literal
-In ES6, you create a template literal by wrapping your text in backticks (`)
-you can freely use the single or double quotes in the template literal without escaping.
-Variable and expression substitutions
                     At this point, a template literal is just like a better version of a normal JavaScript string. 
                     The big difference between a template literal and a normal string is substitutions.

                     The substitutions allow you to embed variables and expressions in a string. The JavaScript
                     engine will automatically replace these variables and expressions with their values. 
                     This feature is known as string interpolation.



   
	
		
   let firstName = 'John',
    lastName = 'Doe';
    let greeting = `Hi ${firstName}, ${lastName}`;
    console.log(greeting); 

   --------------------------------------------------------------------------------------------------------
    #ES 7     ECMA  Script  2017

//Array.prototype.includes( )
The .includes( ) method makes it easier for you to check if particular 
values are stored in an array. 
In the past, JavaScript developers had to use indexOf and create a new function. 
But .include( ) will return true if an array includes an element and false if it does not.


let array = [1,3,5,9];
console.log(array.includes(2));
console.log(array.includes(3));


//The exponential operator
The exponential operator simplifies the way we do math in JavaScript. 
In the past, we had to use loop, recursive functions, or Math.pow( ),
 which could get pretty messy with each concatenation

	/old
	console.log(Math.pow(2,2));
                   console.log(Math.pow(2,3));
	
	/new
	console.log(2**2);
                   console.log(2**3);




//Communication in Enterprise Level Application

	A. syncronous communication - immediate response for your request

                        client ---request--> server
			<-----response-------

	B. async communication - 

			A. FF
				bank ==send====> sms

			B. FWC
                                5th Aug imp meeting

                                manager-saly - UK
                                manager-adam - UK

				imp festival - leave request - 1st Aug

                                
				request --->  
						after 2 days
				<---response 

				Kafka , 






















// async and wait

If you use the async keyword before a function definition,
 you can then use await within the function. 
When you await a promise, the function is paused in a non-blocking way until the promise settles.
 If the promise fulfills, you get the value back. If the promise rejects, the rejected value is thrown.

-ES 2017 introduced Asynchronous functions.
-Async functions are necessarily a cleaner way to work with asynchronous code in JavaScript.
-A promise is an object that may produce a single value sometime in the future: 
   either a resolved value or a reason that it’s not resolved
-A promise may be in one of 3 possible states: fulfilled, rejected, or pending.
-Promises are eager, meaning that a promise will start doing whatever task
 you give it as soon as the promise constructor is invoked. 

Async functions in Javascript
The word “async” before a function means one simple thing: 
a function always returns the promise. 
Other values are wrapped in a resolved promise automatically.

Await in Javascript
The keyword await JavaScript to wait until that promise settles and returns its result.


function resolveAfter2Seconds() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 8000);
  });
}

async function asyncCall() {
  console.log('calling');
  const result = await resolveAfter2Seconds();
  console.log(result);
  // expected output: "resolved"
}

asyncCall();








===================================================================
//case study
<!DOCTYPE html>  
<html lang = "en">  
<head>  
<title> JavaScript Calculator </title>  
  
<style>  
h1 {  
    text-align: center;  
    padding: 23px;  
    background-color: skyblue;  
    color: white;  
    }  
  
#clear{  
width: 270px;  
border: 3px solid gray;  
    border-radius: 3px;  
    padding: 20px;  
    background-color: red;  
}  
  
.formstyle  
{  
width: 300px;  
height: 530px;  
margin: auto;  
border: 3px solid skyblue;  
border-radius: 5px;  
padding: 20px;  
}  
  
  
  
input  
{  
width: 20px;  
background-color: green;  
color: white;  
border: 3px solid gray;  
    border-radius: 5px;  
    padding: 26px;  
    margin: 5px;  
    font-size: 15px;  
}  
  
  
#calc{  
width: 250px;  
border: 5px solid black;  
    border-radius: 3px;  
    padding: 20px;  
    margin: auto;  
}  
  
</style>  
  
</head>  
<body>  
<h1> Calculator Program in JavaScript </h1>  
<div class= "formstyle">  
<form name = "form1">  
      
    <!-- This input box shows the button pressed by the user in calculator. -->  
  <input id = "calc" type ="text" name = "answer"> <br> <br>  
  <!-- Display the calculator button on the screen. -->  
  <!-- onclick() function display the number prsses by the user. -->  
  <input type = "button" value = "1" onclick = "form1.answer.value += '1' ">  
  <input type = "button" value = "2" onclick = "form1.answer.value += '2' ">  
  <input type = "button" value = "3" onclick = "form1.answer.value += '3' ">  
   <input type = "button" value = "+" onclick = "form1.answer.value += '+' ">  
  <br> <br>  
    
  <input type = "button" value = "4" onclick = "form1.answer.value += '4' ">  
  <input type = "button" value = "5" onclick = "form1.answer.value += '5' ">  
  <input type = "button" value = "6" onclick = "form1.answer.value += '6' ">  
  <input type = "button" value = "-" onclick = "form1.answer.value += '-' ">  
  <br> <br>  
    
  <input type = "button" value = "7" onclick = "form1.answer.value += '7' ">  
  <input type = "button" value = "8" onclick = "form1.answer.value += '8' ">  
  <input type = "button" value = "9" onclick = "form1.answer.value += '9' ">  
  <input type = "button" value = "*" onclick = "form1.answer.value += '*' ">  
  <br> <br>  
    
    
  <input type = "button" value = "/" onclick = "form1.answer.value += '/' ">  
  <input type = "button" value = "0" onclick = "form1.answer.value += '0' ">  
    <input type = "button" value = "." onclick = "form1.answer.value += '.' ">  
    <!-- When we click on the '=' button, the onclick() shows the sum results on the calculator screen. -->  
  <input type = "button" value = "=" onclick = "form1.answer.value = eval(form1.answer.value) ">  
  <br>   
  <!-- Display the Cancel button and erase all data entered by the user. -->  
  <input type = "button" value = "Clear All" onclick = "form1.answer.value = ' ' " id= "clear" >  
  <br>   
    
</form>  
</div>  


</body>  
</html> 




#ADM
1. Need for Maintenance:

Correcting Defects: Fixing bugs or issues discovered after software deployment.

Adapting to Environment Changes: Modifying software to work with new operating systems, databases, browsers, or hardware.

Enhancing Performance: Improving efficiency, response time, or optimizing resource usage.

Adding New Features: Extending the software’s functionality based on evolving business needs.

Ensuring Security: Updating software to protect against emerging security threats.

Legal/Regulatory Compliance: Modifying software to comply with new regulations or standards.



2. Challenges in Software Maintenance

Understanding Legacy Code: Original developers may not be available, and documentation may be outdated.

High Complexity: Interdependencies between modules can make changes risky.

Limited Documentation: Incomplete or outdated documentation increases maintenance difficulty.

Regression Risks: Fixing one issue can unintentionally introduce others.

Resource Constraints: Limited budgets, skilled personnel, or tools for maintenance.

Change Management: Ensuring version control and proper tracking of all changes.


3. Categories of Software Maintenance

Category	Description
Corrective	Fixing defects or errors reported by users post-deployment.
Adaptive	Modifying software to adapt to changes in environment.
Perfective	Enhancing functionalities or performance based on user feedback.
Preventive	Making changes to improve future maintainability and prevent potential problems.




Reporting Progress in Agile Projects typically focuses on transparency, collaboration,
 and value delivery over rigid documentation. Instead of traditional progress reports, Agile uses lightweight, iterative techniques. Here's an overview of how progress is reported in Agile projects:


1. Daily Stand-ups (Daily Scrum)
Frequency: Dail
Purpose: Quick updates by each team member:
What was done yesterday?
What will be done today?
Any blockers or impediments?

2. Sprint Reviews
Frequency: At the end of each sprint
Purpose: Demonstrate completed work (potentially shippable product increment) to stakeholders for feedback.
Outcome: Agreement on what’s complete, discussion on next priorities.

3. Burndown Charts / Burnup Charts
Burndown: Tracks remaining work over time.
Burnup: Shows completed work towards total scope.
Benefit: Visual, simple way to track sprint or release progress.

4. Velocity Tracking
Measures the amount of work (usually in story points) completed per sprint.
Helps forecast future sprint capacity and release planning.

5. Cumulative Flow Diagrams
Visualizes the flow of work through stages (To Do, In Progress, Done).
Identifies bottlenecks or work pile-ups.

6. Sprint Goals Achievement
Progress reported against pre-defined sprint goals, not just task completion.

7. Product Backlog Refinement
Continuous visibility of prioritized items.
Reporting can focus on how backlog is evolving based on customer feedback and team capacity.


8. Team Demos
Short demos after completing significant features or increments, outside of formal sprint reviews.


9. Agile Project Dashboards (Tool-Based Reporting)
Tools like Jira, Azure DevOps, Rally, or Trello provide real-time dashboards.
Common metrics:
Number of stories completed
Remaining backlog items
Sprint progress
Team capacity/utilization






28th July 2025
What we have done last day ?
Venigalla,Karthik,Upender,,Abhishek,Murtaza,
[akhila],[saikrishna],[rahul],[Raghav],[surya]


#Unix
Introduction to Unix/Linux
Architecture of Unix/Linux OS
set up virtual machine
Linux file system and boot process
File and file system
CLI Using bash shell
User and Groups
Unix Process
Text editors
IO redirection

#Project Artifact Review:
2


#DataBase Design
Entity Reltionship Diagram
Case Study
HandsOn:Project ERD


#Advanced GIT
#Advanced JQuery
#Advanced Bootstrap


TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,Murtaza,
       Upender,Teja,Raghu,Mohith,,Prasanth,Abhinav
       [Karthik],[monoj],nithilesh,david,[aravind],[rahul],[Praneeth],abhiram

Java-Buzz words
JavaScript


HandsOn - bootstrap(3) , GIT(3) 





#Unix
Introduction to Unix/Linux
Architecture of Unix/Linux OS
set up virtual machine
Linux file system and boot process
File and file system
CLI Using bash shell
User and Groups
Unix Process
Text editors
IO redirection
















#Introduction to Unix/Linux
 
- what is unix/Linux
   - what is os - simple piece of software which control computer hardware
     resources and manages multiple user program running on it.
   - os is the controller of hardware resources.
   - os control the following
           - keyboard
           - ram
           - cpu
           - usb devices
           - hard disk
   - other os like  windows 11 , Android OS running on phone , VxWorks Embedded missile launcher 



- Unix history
   - Unix originated in MIT , Bell labs and generic electric
   - out of group of developer Ken Thompson and Denis Ritchie modified and rename as Unix.
   - different org developed the Unix based on their need.
   - computer engineer Linus Torvalds created Linux from the base version of unix.


- Unix family of OS
   - from unix multiple OS evolved
                - AIX(created by IBM)
                - Solaris(created by sun)
                - Linux 
                - HP-UX
                - Free BSD
   - from Linux multiple os evolved 
                - redhat
                - centos
                - fedora
                - ubuntu
                - debain


- User Interface
     - GUI
     - CLI


- multi user os 
     - 100 user can use the same os.



#Archiecture of Unix(IMAGE)

     Applications
    ==========
     Shell
    ==========
     System call
    ==========
     kernel

 - kernel
   - kernel is the heart of the os or master of os
   - kernel is written in c
   - Linux kernel manages harddisk , mouse , ram , ethernet etc
   - it also manages user process.
   - 
 - System call
   - System call  are the standard call which Query the kernel for specific need.
             - when you write some code , it is sending a system call to kernel and you will get the date.
             - system call access file from disk
             - system call access to packets in the network devices.
             - when you open a browser ie a user process the start of the process is done as system call.
             - when you kill a process , it will go as system call.
  - shell
   - it is the user interface that is used to run command line program or utilities.
   - it is the user interface to the OS.
   - shell call the system call to get the output.
   - type of shell
            bash - bourn again shell, default to centos , ubuntu etc
            ksh - not default to os
            csh - not default to os

- Application
   - application are user program that kernel manage
   - ex database , web server(apache http) , browser





#set up virtual machine

- Oracle VM
     - not required to format your host os.
     - using oracle vm as hypervisor we install unix.
     - we can install any Linux os flavour above oracle VM
     - creation of vm and above it guest os like ubuntu use  the host os resources.
     - download the oracle VM
          https://www.oracle.com/eg/virtualization/technologies/vm/downloads/virtualbox-downloads.html

- Using ubuntu iso image
     - download ubuntu iso image
          https://ubuntu.com/download/desktop/thank-you?version=24.04.2&architecture=amd64&lts=true




#setup virtual machine 

- Google Cloud 
       - google cloud account
       - account should be vailadted by Credit card

       - create ubuntu  VM
       - Update the package lists and upgrade existing packages
                  /> sudo apt update && sudo apt upgrade 
       - Install a desktop environment like XFCE or Ubuntu Desktop
                  /> sudo apt-get install -y xrdp
                  /> sudo apt-get install -y xfce
                  /> sudo service xrdp restart
                  /> sudo -a
                  /> passwd
                  /> install rdp (windows 11 does not support rdp)














#Linux file system and boot process
     - how Linux os start up ?
     - kernel maintain a file and directory structure.
     - each file and directory is given a unique number called the inode.
     - / is called the root of the file system.
     - under root directories there exist other directories and file.























storage
     - harddisk is defined as file system.
     - filesystem supported by Linux are ext3 , ext4, jfs etc 
     - all unix based os use ext3 and ext4 as default.
     - storage media supported are SCSI disk , USB disk etc
   /> ls    - list directories and file
   /> ls -li - show some other info
   /> ls -li /
  




























File System Directory Structure:

/ - root or parent
/bin - binary executable like bash date
/boot - contain the kernel code image
/dev - device interface files
     - tty are terminal devices. linux kernel identify the terminal are also as devices. 
     - stdin connected with keyboard
     - stdout connected with monior.
/etc - configuration file for system and application
/home - home directory for the user
      - unix support multi user environment
      - every user have their home directory.
/media - usb drive , cd rom are mounted
/var/log - application and system log files
/proc - kernel process file system

/> ls /bin

/> ls /boot    - kernel software is inside

/> ls /dev

/> ls /etc

/> ls /home

/> ls /var/log

/> ls /proc

/> which date - location of the command
/> which pwd  




#boot process

- systematic workflow of the process  which take place '
when Linux machine start.
s-1 system power on
s-2 Power On self Test
s-3 Basic input output system(BIOS) drivers loaded into RAM
      - Disk IO Driver
      - keyboard
      - display monitor
s-4 kernel is loaded into RAM through disk MBR(Master Boot Record)
s-5 MBR is the first sector in the disk which further 
    points to kernel code image.



/> sudo shutdown -h now
- 
==========================================================

29th July 2025
What we have done last day ?
Venigalla,Karthik,Upender,,Abhishek,Murtaza,
[akhila],[saikrishna],[rahul],[Raghav],[surya]

#Logging//Aspect
Why Logging is Important
Importance of Logging
Common Logging Use Cases
Logging Levels Explained

What is Log4j2?
Core Components of Log4j
Log Levels in Log4j
Java Code Example

SLF4J and Log4j2
What is SLF4J?
Why Use SLF4J?
Key Concepts


#AdvancedUnix
File management
Metacharacters in unix
Creating Files in Unix
Directory Management
File Permission/Access Modes
Basic Utilities
Pipe and filter
Text Processing Commands
Process Management


#What is Shell Scripting?
#Advanced GIT
#Advanced JQuery
#Advanced Bootstrap


TechDemo:-1
Done - [Prasanth][Teja]Hari,Abhishek,Ajay,Himanshu,Fasi,Murtaza,
       Upender,Teja,Raghu,Mohith,,Prasanth,Abhinav
       [Karthik],[monoj],nithilesh,david,[aravind],[rahul],[Praneeth],abhiram




HandsOn - bootstrap(3) , GIT(3) 



Why Logging is Important
Logging is the practice of recording events, actions, and messages 
from applications or systems into files, databases, or monitoring tools.


Importance of Logging:


-Troubleshooting	  Helps diagnose errors or failures quickly
-Understanding Behavior	  Tracks how users and systems behave over time
-Auditing & Compliance	  Keeps historical records for security and audits
-Performance Monitoring	  Identifies bottlenecks or abnormal patterns
-Reproducibility	  Lets you recreate steps that led to an issue
-Alerts & Notifications	  Enables real-time alerts when problems occur



Common Logging Use Cases

Use Case		Description
Application Debugging	Log function entries, variable values, and logic flow
Security 		Audits	Record logins, failed access attempts, privilege escalations
System Monitoring	Track CPU usage, disk I/O, uptime, crash reports
User Activity Logs	Track user actions like logins, data updates, or file uploads
Transaction Logs	Record database or API transaction events
Error Tracking		Capture stack traces, HTTP status codes, and exception messages


Logging Levels Explained
Logging levels help categorize the importance and urgency of log messages.

Level			Use Case				Example

DEBUG			Detailed info for debugging		Variable values, flow tracing
INFO			General app progress			Startup complete, user login
WARNING			Something unexpected, not critical	Deprecated API used, retrying connection
ERROR			An error occurred, but app can continue	Failed database write, missing file
CRITICAL / FATAL  	Very severe error, may crash system	Disk full, app crash, service unavailable



Example (Python-style logging):

import logging

logging.debug("This is a debug message")
logging.info("User login successful")
logging.warning("Low disk space")
logging.error("Failed to save file")
logging.critical("System is shutting down!")





Log4j2




#What is Log4j?

A Java-based logging utility used to output log messages to various destinations (console, file, database, socket, etc.)
Provides control over what is logged and how it is logged using log levels, loggers, appender, and layouts.
Helps separate diagnostic output from core business logic.




Core Components of Log4j

Component	Description
Logger	        Captures logging information
Appender	Defines where logs are written (file, console, database, etc.)
Layout	        Defines the format of the log message
Level	        Indicates the severity or importance of the message (e.g., DEBUG, INFO, ERROR)



Log Levels in Log4j
Level	Purpose
FATAL	Critical errors causing system shutdown
ERROR	Significant problems, app can still run
WARN	Something unexpected, but not harmful
INFO	General informational messages
DEBUG	Detailed diagnostic info
TRACE	Most detailed information, usually for low-level debugging
OFF	Turns off logging
ALL	Enables all levels of logging



Basic Example: log4j.properties

log4j.rootLogger=DEBUG, file
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=app.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d [%t] %-5p %c - %m%n




Java Code Example

import org.apache.log4j.Logger;
public class Demo {
    static Logger logger = Logger.getLogger(Demo.class);

    public static void main(String[] args) {
        logger.debug("Debugging message");
        logger.info("Informational message");
        logger.warn("Warning message");
        logger.error("Error message");
        logger.fatal("Fatal message");
    }
}


Common Log4j Appenders
Appender	Description
ConsoleAppender	Logs to the console
FileAppender	Logs to a file
RollingFileAppender	Rotates log files based on size/date
SocketAppender	Sends logs over a network socket
JDBCAppender	Writes logs to a database



Log4j Security Note
Log4j 1.x is outdated and no longer maintained.
Log4j 2.x is the recommended version.



Logger Hierarchy in Log4j
In Log4j, loggers are organized in a hierarchical tree structure based on their names,
 which usually represent the package and class names of your application (like com.company.module.ClassName).



Key Concept: Logger Hierarchy
Loggers are named using dot-separated namespaces, and child loggers inherit settings (like level and appenders) from their parent loggers unless explicitly overridden.

Example Logger Tree

Root Logger
 └── com
     └── com.company
         └── com.company.module
             └── com.company.module.ClassName

com.company.module.ClassName is a child of com.company.module, which is a child of com.company, and so on.

All loggers inherit from the Root Logger unless configured otherwise.



Logger Inheritance Behavior
Inheritance	         Behavior
Level Inheritance	If a logger doesn't have its own level, it inherits the level from its parent
Appender Inheritance	If additivity = true (default), log messages are also sent to parent appenders



Additivity
Additivity = true (default): Messages are passed up the hierarchy to parent loggers and their appenders.
Additivity = false: Stops message propagation to ancestors.




Example in log4j.properties

# Root logger
log4j.rootLogger=INFO, console

# Logger for a package
log4j.logger.com.company.module=DEBUG, file
log4j.additivity.com.company.module=false
In this example:

Messages from com.company.module are logged at DEBUG level and go to the file appender only.
Messages from other packages go to console at INFO level.





Code Example

Logger rootLogger = Logger.getRootLogger();
Logger moduleLogger = Logger.getLogger("com.company.module");
Logger classLogger = Logger.getLogger("com.company.module.ClassName");
classLogger.debug("Debug from class"); // Goes to moduleLogger’s config if classLogger has none



Why Logger Hierarchy Is Useful
Fine-grained control: Set different log levels per module/package.
Organized configuration: Follows Java package structure.
Avoid duplication: Use inheritance to avoid repeated configuration.





Lab:
s-1  create a maven project using log4j2 using 
             org.apache.mavenarchetypes:maven-achetypes-quick   dependency

s-2 install  Installing Log4j2

<dependencies>
  <dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.13.0</version>
  </dependency>
  <dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.13.0</version>
  </dependency>
</dependencies>

s-3
create a class
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class App {
    private static final Logger logger = LogManager.getLogger(App.class);
    public static void main( String[] args ) {
        System.out.println( "Hello, user!" );
        logger.trace("We've just greeted the user!");
        logger.debug("We've just greeted the user!");
        logger.info("We've just greeted the user!");
        logger.warn("We've just greeted the user!");
        logger.error("We've just greeted the user!");
        logger.fatal("We've just greeted the user!");
    }
}




s-4 message with default configuration available in the console.


s-5 create custom configuration for log4j2
Log4j2’s custom configuration isn’t enough for most real use cases. After all, you probably want to log to more useful targets than the console. You’ll also want to log using the other logging levels. So, now, we’re going to see how to configure Log4j2 beyond its default configurations.

Log4j2, like many other logging frameworks, can be configured both programmatically but also via configuration files.

//customizing log4j2

- create a directory resources under main.
- under resources create log4j2.xml

#log4j2.xml

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">
    <Appenders>
        <Console name="ConsoleAppender" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </Console>
    </Appenders>
    <Loggers>
        <Root level="debug">
            <AppenderRef ref="ConsoleAppender" />
        </Root>
    </Loggers>
</Configuration>

========================================================

Log4J2   and  SLF4J


Introduction to SLF4J (Simple Logging Facade for Java)
SLF4J supports integration with multiple frameworks and libraries making it suitable for normal and flexible projects. LOG4J also supports integration with multiple Java-based frameworks and applications. LOG4J 2's API makes it even more preferable for modern applications requiring advanced logging features.




What is SLF4J?
SLF4J stands for Simple Logging Facade for Java. It is not a logging implementation but a facade or abstraction for various logging frameworks (e.g., Log4j, java.util.logging, Logback). 
It allows developers to write logging code that is independent of the actual logging implementation used at runtime.


Why Use SLF4J?
Decoupling: You can switch between different logging frameworks without changing your application code.
Uniform API: Offers a standard interface that works across different logging backends.

Bridges Available: SLF4J provides bridges to redirect logs from other APIs (like commons-logging, java.util.logging) to SLF4J-supported frameworks like Logback.


Key Concepts
Facade Layer: SLF4J acts as a common API.
Binding: You include a specific backend (e.g., slf4j-log4j12.jar) to bind SLF4J to a concrete implementation.
Backends: Logback, Log4j, java.util.logging, tinylog, etc.


How SLF4J Works
At compile-time:
You write your code using the SLF4J API.


At runtime:
You include the desired logging framework binding (like Logback or Log4j), and SLF4J delegates logging calls to that implementation.


Example Code

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MyApp {
    private static final Logger logger = LoggerFactory.getLogger(MyApp.class);

    public static void main(String[] args) {
        logger.info("Application started");
        logger.warn("This is a warning");
        logger.error("This is an error message");
    }
}


SLF4J with Logback (Typical Setup)
Dependencies (Maven):


<dependency>
  <groupId>org.slf4j</groupId>
  <artifactId>slf4j-api</artifactId>
  <version>2.0.9</version>
</dependency>
<dependency>
  <groupId>ch.qos.logback</groupId>
  <artifactId>logback-classic</artifactId>
  <version>1.4.11</version>
</dependency>


SLF4J Logging Levels
TRACE: Fine-grained debugging

DEBUG: Debugging information

INFO: General runtime events

WARN: Potential issues

ERROR: Error events




Benefits of SLF4J
Pluggable backend
Lightweight and flexible
Clean separation of concerns
Industry standard in modern Java development
Let me know if you'd like a comparison between SLF4J and Log4j, or a guide to setting it up in a Maven/Gradle project.



















#AdvancedUnix
File management
Metacharacters in unix
Creating Files in Unix
Directory Management
File Permission/Access Modes
Basic Utilities
Pipe and filter
Text Processing Commands
Process Management
What is Shell Scripting?













#File management
Listing file command
Metacharacters in unix
Creating Files in Unix




Listing file command:

ls		List files and directories in the current directory
ls -l		Long listing format (includes permissions, owner, size, etc.)
ls -a		Lists all files including hidden files (those starting with .)
ls -la or ls -al	Long listing including hidden files
ls -lh		Long listing with human-readable file sizes (e.g., KB, MB)
ls -lt		Sort by modification time (newest first)
ls -ltr		Sort by modification time (oldest first)
ls -R		Recursively list subdirectories


Metacharacters in unix
metacharacters are special characters that have a meaning beyond their literal value. 
They are used for pattern matching, command chaining, redirection, and more.

	
Wildcard (Globbing) Metacharacters
Metacharacter	Meaning	Example
*	Matches zero or more characters	              ls *.txt (lists all .txt files)
?	Matches exactly one character	              ls file?.txt (matches file1.txt, fileA.txt)
[]	Matches any one character in the se       ls file[123].txt (matches file1.txt, file2.txt, 





Creating Files in Unix


1. touch – Create an Empty File

touch filename.txt
Creates an empty file named filename.txt

If the file already exists, updates its timestamp


2. echo – Create File with Text

echo "Hello, Unix!" > file1.txt
echo "Hello, Unix!" >> file1.txt    //append text
Creates file1.txt with the content Hello, Unix!

cat  file2.txt   //display file content


4. cat – Create File with Content

cat > file3.txt
This is line 1
This is line 2
[Press Ctrl+D to save and exit]
Allows you to type multiple lines into the file



5. printf – More Controlled Output

printf "Name: John\nAge: 25\n" > info.txt
Creates a file with formatted text


6. nano, vi, vim – Text Editors

/> sudo apt  install nano

/> sudo apt install vim

nano newfile.txt
vi newfile.txt
Opens a text editor in the terminal to create/edit files


7. cp, mv – Indirect File Creation

cp old.txt new.txt
Copies old.txt to new.txt (creating new.txt)

mv old.txt new.txt
Renames or moves the file



Counting Words in a File

	wc  -w  filename.txt   	Counts only the words



Renaming Files, 

	mv report.txt summary.txt 

Deleting Files

                    rm filename.txt















#Directory Management:

1.Home Directory
Your home directory is where you land after logging in.


2. Absolute vs Relative Pathnames
Type	         Example	Description
Absolute	/home/user/docs/file.txt	Full path from the root /
Relative	../docs/file.txt	        Path relative to current directory

Examples:


cd /etc           # absolute
cd ../Downloads   # relative (go up one level, then into Downloads)


3. Listing Directories
Use the ls command:


ls                  # List current directory
ls -l               # Long listing with details
ls -a               # Include hidden files (starting with .)
ls /path/to/dir     # List a specific directory



4. Creating Directories
Use mkdir (make directory):


mkdir myfolder             # Create a single directory
mkdir -p folder1/folder2   # Create nested directories


5. Removing Directories
Use rmdir 


rmdir emptydir             # Remove empty directory



6. Changing Directories
Use cd (change directory):


cd /path/to/directory       # Absolute path
cd myfolder                 # Relative path
cd ..                       # Move up one level
cd ~                        # Go to home directory
cd -                        # Go to previous directory


7. Renaming Directories
Use mv (move):


mv olddirname newdirname

Example:

mv projects backup_projects





















#File Permission/Access Modes

1. Permission Indicators
When you run ls -l, you see lines like this:

-rwx r-x r--  1 user group  1234 Jul 28 14:00 file.sh
The first column (-rwxr-xr--) breaks down as:



Position	Meaning	Who it applies to
-	File type (- for regular file, d for directory)	—
rwx	Read, write, execute	Owner
r-x	Read, execute	                    Group
r--	Read only	                    Others



2. File Access Modes
For files, the meaning of permissions:

Permission	Description
r (read)	View the contents of the file
w (write)	Modify or overwrite the file
x (execute)	Run the file as a program/script



3. Directory Access Modes
For directories, the permission meanings are different:

Permission	Description
r	List files in the directory
w	Create, delete, or rename files in the directory
x	Enter (cd into) and access files inside the directory



4. Changing Permissions – chmod
- These permissions control who can read, write, or execute a file or directory

User Categories:
u: User (owner)
g: Group
o: Others
a: All (u, g, and o)

Permission Types:
r: Read
w: Write
x: Execute

Operators:
+: Add permission
-: Remove permission
=: Set permissions exactly



chmod u+w filename  # Adds write permission for the owner
chmod g-x directory # Removes execute permission for the group
chmod a=rwx file.sh # Sets read, write, and execute permissions for all



chmod u+x file.sh      # Add execute permission to the owner
chmod g-w file.txt     # Remove write permission from group
chmod o=r file.txt     # Set read-only for others
chmod a+x script.sh    # Add execute for all (user, group, others)




5. Absolute (Octal) Permissions
Each permission has a number:

Permission	Value
r	4
w	2
x	1

So:

rwx = 4 + 2 + 1 = 7

rw- = 4 + 2 = 6

r-- = 4 = 4

Example:

chmod 755 file.sh

This gives:

7 = rwx (owner)

5 = r-x (group)

5 = r-x (others)



#Basic Utilities
1.Printing Files
You can print text files using:

lp filename.txt

Both commands send the file to the default system printer.





2. pr Command – Format Text for Printing
The pr command is used to prepare text files for printing by paginating and adding headers.

Syntax:
pr [options] filename

Useful Options:
Option	Description
-l	Set page length
-h	Set custom header
-n	Add line numbers
-d	Double space output

Example:

pr -h "Monthly Report" -n -l 50 report.txt | lp



3. lp and lpr – Print Files
Command	Description
lp file.txt	Print using System V style
lpr file.txt	Print using BSD style(Berkeley Software Distribution)



Options:
Option	Description
-d printer_name	Specify a printer
-n number	Number of copies
-o option	Pass print options (e.g., orientation, margins)

Examples:
lp -n 2 file.txt         # Print 2 copies
lpr -P hpprinter file.txt  # Send to specific printer


lpstat and lpq – Check Print Queue
Command	Description
lpstat	Check status of printer and jobs
lpstat -p	List available printers
lpstat -o	Show current jobs
lpq	Show print queue (BSD-style)

Example:

lpstat -o
lpq -P hpprinter















5. cancel and lprm – Cancel Print Jobs
Command	Description
cancel job_id	Cancel a print job (System V)
cancel -a	Cancel all jobs for current user
lprm job_id	Cancel job (BSD style)
lprm -	Remove all of your print jobs

Find job ID first:

lpstat -o
Then:
cancel 12
lprm 12














6. Sending Email from Unix Command Line
To send email from the terminal, use mail, sendmail, or mailx (must be installed and configured):

Using mail:

echo "This is the body" | mail -s "Subject" recipient@example.com


Attach a file:

mail -s "Report" -a file.txt recipient@example.com < /dev/null



#Pipe and filter


grep Command – Search Text in Files
Basic Syntax:

grep [options] "pattern" filename
Common Use Cases:

Command	Description

grep "error" logfile.txt	Find lines containing “error”

grep -i "error" logfile.txt	Case-insensitive search

grep -n "error" logfile.txt	Show line numbers

grep -v "success" logfile.txt	Show lines not matching

grep -r "main()" .	Recursive search in all files in current dir

grep "^start" file.txt	Lines starting with start

grep "end$" file.txt	Lines ending with end


sort Command – Sort Lines in Text Files
Basic Syntax:
sort [options] filename
Common Use Cases:
Command	Description

sort file.txt	                   Sort lines alphabetically
sort -r file.txt	        Reverse order
sort -n numbers.txt	Sort numerically
sort -u file.txt	        Remove duplicates
sort -k 2 file.txt	        Sort by second column
















3. pg Command – Page-by-Page Viewing
Usage:

pg filename

Shows one page at a time

Use:

Enter: Scroll line-by-line

Space: Scroll page-by-page

q: Quit

/pattern: Search for pattern

pg is similar to more, but allows backward navigation on some systems.









4.more Command – Simple Paged Viewer

Common Controls:
Key	Action
Space	Next page
Enter	Next line
b	Back one page
/pattern	Search forward
q	Quit

Example Combined Usage

grep "error" log.txt | sort | more
Find lines with "error", sort them, and view page-by-page.





#Text Processing Commands


1. awk – Pattern-Action Language for Text Processing


awk '{print $1}' file.txt

Common Usage:
Example	Meaning

awk '{print $1, $3}' file.txt		Print 1st and 3rd columns
awk -F ":" '{print $1}' /etc/passwd	        Set field separator to colon
awk '$3 > 50' file.txt			Filter rows where 3rd column > 50













2. sed – Stream Editor

sed 's/old/new/' file.txt

Common Usage:
Example	Meaning

sed 's/error/INFO/g' log.txt	Replace all "error" with "INFO"
sed -n '5,10p' file.txt	        Print lines 5 to 10
sed '/^#/d' file.txt	        Delete comment lines starting with #



3. cut – Cut Sections from Lines


cut -d ":" -f1 /etc/passwd
Options:
Option	Description
-d	Specify delimiter
-f	Choose fields
-c	Select specific characters


4. sort – Sort Lines in Text Files

sort file.txt
Example	Meaning
sort -n	Numeric sort
sort -r	Reverse
sort -u	Unique sort
sort -k2,2	Sort by 2nd column only



















tr – Translate or Delete Characters

tr 'a-z' 'A-Z' < file.txt
Common Usage:
Example	Meaning
tr -d '0-9'	Delete digits
tr -s ' '	Squeeze repeated spaces



6. uniq – Report or Filter Duplicate Lines

uniq file.txt
Example	Meaning
`sort file.txt	uniq`
uniq -c	Count occurrences
uniq -d	Show duplicates only



7. join – Join Lines on Common Fields


join file1.txt file2.txt
Example	Description
-1 1 -2 1	Join on 1st field of both files
-t ":"	Specify delimiter

Both files must be sorted on the join field.


















comm – Compare Two Sorted Files Line by Line

comm file1 file2
Column	Meaning
1	Lines only in file1
2	Lines only in file2
3	Common lines



















9. diff – Show Differences Between Files

diff file1.txt file2.txt
Option	Description
-y	Side-by-side comparison
-c	Context format
-u	Unified format (commonly used in patches)



10. wc – Word, Line, and Byte Count


wc file.txt
Option	Description
-l	Line count
-w	Word count
-c	Byte count
-m	Character count


11. nl – Number Lines

nl file.txt
Adds line numbers (more advanced than cat -n)


12. rev – Reverse Characters in Lines

rev file.txt
Reverses every line character-wise.


13. pr – Format Text for Printing

pr file.txt
Option	Description
-l 50	Set page length
-d	Double space
-n	Line numbers
-h "Title"	Header title

















#Process Management

1. Starting a Process
A process is typically started by running a command or executing a script:


./script.sh
python app.py
This starts the process in the foreground by default.


2. Foreground Processes
Takes over the terminal until finished.

You can't use the terminal while it's running.


sleep 30
To stop a foreground process:

Press Ctrl + C → Terminates the process

Press Ctrl + Z → Suspends (pauses) the process and moves it to the background (stopped)



3. Background Processes
Run without blocking the terminal.

Start a process in the background:

sleep 60 &
The & runs the process in the background.

You’ll see output like:


[1] 12345
[1] = Job ID

12345 = Process ID (PID)



4. Listing Running Processes
Use ps:

ps                # Processes in current shell
ps -ef            # All processes with full details
ps aux            # All processes (BSD style)
Use jobs:


jobs              # Shows background/suspended jobs in current terminal
Use top or htop:


top               # Real-time view of system processes

5. Stopping/Killing Processes
Command	Action
kill PID	Gracefully stop a process by ID
kill -9 PID	Forcefully terminate a process
kill %1	Kill job with job ID 1
fg	Bring background job to foreground
bg	Resume suspended job in background


6. Parent and Child Processes
Every process has a parent (except init or systemd).

Use ps -ef or pstree to see hierarchy.

Example:


ps -o pid,ppid,cmd
Column	Description
PID	Process ID
PPID	Parent Process ID
CMD	Command used to start it



7. Daemon Processes
Background services (e.g., cron, sshd)

Started during boot or manually

Run independently of terminal

Check daemons:


ps -ef | grep daemon
Create a simple daemon-like script:


nohup myscript.sh &

8. top Command – Monitor System in Real-Time

top
Shows CPU, memory, and process stats

Press k to kill a process

Press q to quit

Use htop for an interactive version (if installed)



9. Job ID vs Process ID
Term	Description
Job ID (%1)	ID assigned by shell to background/suspended job
Process ID (PID)	Unique OS-level ID for every process

Use jobs to find job ID:

Use ps or top to find PID:


ps -ef | grep process_name

Example: Combined Usage

sleep 100 &
jobs                   # Shows job ID
ps -ef | grep sleep    # Find PID
kill -9 <PID>          # Kill process
Let me know if you'd like:

A visual process hierarchy diagram

Practice exercises on process control

A script to monitor and kill idle processes



#networking command
1. ping – Test Network Connectivity

ping hostname_or_ip
Example:

ping google.com

Key Options:
Option	Description
-c 4	Send only 4 packets
-i 2	Set interval between pings to 2 seconds
-t 5 (Linux)	Set TTL (time to live)
Ctrl + C	Stop ping manually if running continuously

2. ftp – File Transfer Protocol Client
Note: ftp is outdated and insecure. Use sftp or scp if possible.

Usage:
ftp hostname
Interactive Commands:
Command	Description
open hostname	Connect to an FTP server
user	Provide username and password
ls / dir	List remote files
get file.txt	Download file
put file.txt	Upload file
bye or quit	Exit FTP session

Example:

ftp ftp.example.com
3. telnet – Remote Terminal Access
Note: Like ftp, telnet is insecure. Use ssh instead.

Usage:

telnet hostname port
Example:

telnet towel.blinkenlights.nl
Connects to a remote system on a given port

Can be used to test if a port is open (e.g., telnet google.com 80)


===================================================================
30th July 2025
What we have done last 2 day ?
Venigalla,Karthik,Upender,Abhishek,Murtaza,
[Praneeth],[saikrishna],akhila,rahul,[surya]

#Advanced GIT
GitRepository
Stage Of Git
Remote Repository
Branch in GIT
Branch Creation
Branch Marging
HandOn:


#What is Shell Scripting?
#Advanced JQuery
#Advanced Bootstrap5


TechDemo:-1
Done - Hari,Abhishek,Ajay,Himanshu,Fasi,Murtaza,
       Upender,Teja,Raghu,Mohith,,Prasanth,Abhinav
       Karthik,monoj,nithilesh,david,,,abhiram
	[aravind],[rahul],[Praneeth],vishnu,surya


TechDemo:

 










Reporting Progress in Agile Projects typically focuses on transparency, collaboration,
 and value delivery over rigid documentation. Instead of traditional progress reports, Agile uses lightweight, iterative techniques. Here's an overview of how progress is reported in Agile projects:


1. Daily Stand-ups (Daily Scrum)
Frequency: Dail
Purpose: Quick updates by each team member:
What was done yesterday?
What will be done today?
Any blockers or impediments?

2. Sprint Reviews
Frequency: At the end of each sprint
Purpose: Demonstrate completed work (potentially shippable product increment) to stakeholders for feedback.
Outcome: Agreement on what’s complete, discussion on next priorities.

3. Burndown Charts / Burnup Charts
Burndown: Tracks remaining work over time.
Burnup: Shows completed work towards total scope.
Benefit: Visual, simple way to track sprint or release progress.

4. Velocity Tracking
Measures the amount of work (usually in story points) completed per sprint.
Helps forecast future sprint capacity and release planning.

5. Cumulative Flow Diagrams
Visualizes the flow of work through stages (To Do, In Progress, Done).
Identifies bottlenecks or work pile-ups.

6. Sprint Goals Achievement
Progress reported against pre-defined sprint goals, not just task completion.

7. Product Backlog Refinement
Continuous visibility of prioritized items.
Reporting can focus on how backlog is evolving based on customer feedback and team capacity.


8. Team Demos
Short demos after completing significant features or increments, outside of formal sprint reviews.


9. Agile Project Dashboards (Tool-Based Reporting)
Tools like Jira, Azure DevOps, Rally, or Trello provide real-time dashboards.
Common metrics:
Number of stories completed
Remaining backlog items
Sprint progress
Team capacity/utilization











LAB-
https://github.com/Amit202020/Spring-Framework.git

Create your won github
https://github.com
username : Amit202020
password : h7443hHD
  >>create git repository
  >> go to git bash
  >> cd desktop
  >> git clone https://github.com/Amit202020/Html5Css3bootstrap4.git
  >> cd java
  - add an eclipse project in the java folder
  >> git status
  >> git add .
  >> git commit -m "class free code"
  >> git push origin master











GitRepository:
   - contain files , history , config managed by GIT.
   - git repository -> /.git


Stage Of Git:
   - Working Directory - live files or untracked area of GIT
   - Staging area - when git start tracking and saving changes 
   - Git Directory - local repo or .git


Remote Repository:
   - code hosting service.


Branch in GIT :
    - git will work as tree. that have multiple branch.
    - each branch have its leaf , fruit etc.
    - fall of any branch will not impact the tree.

/> git branch
   
/> ll

/> git branch develop

/> git branch

/> git switch develop

some operations in develop branch 
  git clone https://github.com/Amit202020/Html5Css3bootstrap4.git

/> touch sampletestfile1.txt
/> touch sampletestfile2.txt
/> echo "This is sample file1" >> sampletestfile1.txt
/> echo "This is sample file2" >> sampletestfile1.txt
/> git status
/> git add . 
/> git commit -m "simple file"
/> ll
/> git push
error
/> git push origin develop

develop branch created in the GitHub
each branch have their own specific file system
each branch have their own specific code base
Image

marge the develop branch with master branch
create pull request from develop to master
change from master to develop
code of develop is merged to master branch



- developer create their own branch
- dev have their incomplete code with their end.
- once complete then dev marge the code with the main branch.
- compare git commit
     />git diff
        />git log --oneline
- compare change between 2 commit
        /> git diff 5065aff 5a2d942
- when we create release branch from master branch that branch is fixed.
- image
- branch have your tested code from the team
- every team will create the release branch
- main branch will continue
- using branch git support version control system


HandsOn- Git Marge is working
       - git diff  [commitid]  [commitid]
       - same code in the master branch and develop branch








1. Need for Maintenance:

Correcting Defects: Fixing bugs or issues discovered after software deployment.

Adapting to Environment Changes: Modifying software to work with new operating systems, databases, browsers, or hardware.

Enhancing Performance: Improving efficiency, response time, or optimizing resource usage.

Adding New Features: Extending the software’s functionality based on evolving business needs.

Ensuring Security: Updating software to protect against emerging security threats.

Legal/Regulatory Compliance: Modifying software to comply with new regulations or standards.



2. Challenges in Software Maintenance

Understanding Legacy Code: Original developers may not be available, and documentation may be outdated.

High Complexity: Interdependencies between modules can make changes risky.

Limited Documentation: Incomplete or outdated documentation increases maintenance difficulty.

Regression Risks: Fixing one issue can unintentionally introduce others.

Resource Constraints: Limited budgets, skilled personnel, or tools for maintenance.

Change Management: Ensuring version control and proper tracking of all changes.




3. Categories of Software Maintenance

Category	Description
Corrective	Fixing defects or errors reported by users post-deployment.
Adaptive	Modifying software to adapt to changes in environment.
Perfective	Enhancing functionalities or performance based on user feedback.
Preventive	Making changes to improve future maintainability and prevent potential problems.

















	 















What is Shell Scripting?

Shell scripting is the process of writing a series of commands in a text file 
(called a script) to be executed by the Unix/Linux shell (such as bash, sh, zsh).
A shell script automates repetitive tasks, system administration jobs, application deployment, and more.


Key Features of Shell Scripting
Feature	Description
Automation	Run a sequence of commands automatically
Simplicity	Easy to write and execute on most Unix/Linux systems
Integration	Works with commands, utilities, and system resources
Portability	Can run on different systems with minimal changes


Common Shells Used
Shell	Description
sh	Bourne Shell (original)
bash	Bourne Again Shell (most common)
zsh	Z Shell (advanced features)
csh	C Shell
ksh	Korn Shell



Basic Shell Script Example

#!/bin/bash

echo "Welcome to Shell Scripting!"
name="Amit"
echo "Hello, $name"
To run:
Save as myscript.sh

Make executable:
chmod +x myscript.sh
Execute:

./myscript.sh



What You Can Do with Shell Scripts
Automate backups
Monitor system health
Process files and logs
Install and configure software
Schedule tasks with cron
Create custom command-line tools



Key Concepts in Shell Scripting
Concept	Example
Variables	name="Amit"
Conditionals	if, else, elif
Loops	for, while, until
Functions	myfunc() { echo "Hi"; }
Arguments	$1, $2, ...
Exit status	$? for last command result









